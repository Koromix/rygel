diff --git a/vendor/wren/src/include/wren.h b/vendor/wren/src/include/wren.h
index 7845911ce..16abd9b31 100644
--- a/vendor/wren/src/include/wren.h
+++ b/vendor/wren/src/include/wren.h
@@ -538,6 +538,9 @@ WREN_API void wrenGetVariable(WrenVM* vm, const char* module, const char* name,
 // use wrenHasModule to ensure that before calling.
 WREN_API bool wrenHasVariable(WrenVM* vm, const char* module, const char* name);
 
+// Returns true if the foreign instance in [slot] has the class in [class].
+WREN_API bool wrenForeignIsClass(WrenVM *vm, int slot, WrenHandle *classHandle);
+
 // Returns true if [module] has been imported/resolved before, false if not.
 WREN_API bool wrenHasModule(WrenVM* vm, const char* module);
 
diff --git a/vendor/wren/src/vm/wren_vm.c b/vendor/wren/src/vm/wren_vm.c
index 254d0b037..c2c8e6a06 100644
--- a/vendor/wren/src/vm/wren_vm.c
+++ b/vendor/wren/src/vm/wren_vm.c
@@ -1976,6 +1976,20 @@ bool wrenHasModule(WrenVM* vm, const char* module)
   return moduleObj != NULL;
 }
 
+bool wrenForeignIsClass(WrenVM *vm, int slot, WrenHandle *classHandle)
+{
+  validateApiSlot(vm, slot);
+  ASSERT(IS_FOREIGN(vm->apiStack[slot]), "Slot must hold a foreign instance.");
+  ASSERT(classHandle != NULL, "Handle cannot be null.");
+  ASSERT(IS_CLASS(classHandle->value), "Handle value must be a class.");
+
+  ObjForeign *obj = AS_FOREIGN(vm->apiStack[slot]);
+  ObjClass* classObj = AS_CLASS(classHandle->value);
+  ASSERT(classObj->numFields == -1, "Class must be a foreign class.");
+
+  return classObj == obj->obj.classObj;
+}
+
 void wrenAbortFiber(WrenVM* vm, int slot)
 {
   validateApiSlot(vm, slot);
