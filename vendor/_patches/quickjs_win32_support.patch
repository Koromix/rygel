diff -wuN a/vendor/quickjs/quickjs.c b/vendor/quickjs/quickjs.c
--- a/vendor/quickjs/quickjs.c	2019-07-09 19:49:47.000000000 +0200
+++ b/vendor/quickjs/quickjs.c	2019-07-12 16:44:25.722600000 +0200
@@ -28,13 +28,16 @@
 #include <inttypes.h>
 #include <string.h>
 #include <assert.h>
-#include <sys/time.h>
 #include <time.h>
 #include <fenv.h>
 #include <math.h>
-#if defined(__APPLE__)
+#if defined(_WIN32)
+#include "w32_compat.h"
+#elif defined(__APPLE__)
+#include <sys/time.h>
 #include <malloc/malloc.h>
 #elif defined(__linux__)
+#include <sys/time.h>
 #include <malloc.h>
 #endif

@@ -103,7 +106,9 @@
 //#define FORCE_GC_AT_MALLOC

 #ifdef CONFIG_ATOMICS
+#if !defined(PTHREAD_MUTEX_INITIALIZER)
 #include <pthread.h>
+#endif
 #include <stdatomic.h>
 #include <errno.h>
 #endif
diff -wuN a/vendor/quickjs/w32_compat.c b/vendor/quickjs/w32_compat.c
--- a/vendor/quickjs/w32_compat.c	1970-01-01 01:00:00.000000000 +0100
+++ b/vendor/quickjs/w32_compat.c	2019-07-12 18:52:56.342900000 +0200
@@ -0,0 +1,155 @@
+// Hacks for Clang support on Windows (Niels)
+
+#if defined(_WIN32)
+
+#define NOMINMAX
+#define WIN32_LEAN_AND_MEAN
+#include <windows.h>
+#include <inttypes.h>
+#include <time.h>
+#include <sys/types.h>
+#include <sys/timeb.h>
+
+#if !defined(__MINGW32__)
+struct timeval {
+    long tv_sec;
+    long tv_usec;
+};
+#endif
+
+typedef struct { int dummy; } pthread_mutexattr_t;
+typedef struct { int dummy; } pthread_condattr_t;
+
+typedef CRITICAL_SECTION pthread_mutex_t;
+typedef CONDITION_VARIABLE pthread_cond_t;
+
+int clock_gettime(int clock, struct timespec *ts)
+{
+    static const uint64_t EPOCH = (uint64_t)116444736000000000ULL;
+
+    SYSTEMTIME system_time;
+    FILETIME file_time;
+    uint64_t time;
+
+    GetSystemTime(&system_time);
+    SystemTimeToFileTime(&system_time, &file_time);
+    time = ((uint64_t)file_time.dwLowDateTime) + (((uint64_t)file_time.dwHighDateTime) << 32);
+
+    ts->tv_sec  = (long)((time - EPOCH) / 10000000L);
+    ts->tv_nsec = (long)(system_time.wMilliseconds * 1000000);
+
+    return 0;
+}
+
+int gettimeofday(struct timeval *tp, struct timezone *tzp)
+{
+    struct timespec ts;
+    clock_gettime(0, &ts);
+
+    tp->tv_sec = ts.tv_sec;
+    tp->tv_usec = ts.tv_nsec / 1000;
+
+    return 0;
+}
+
+int pthread_mutex_init(pthread_mutex_t *m, pthread_mutexattr_t *a)
+{
+    (void)a;
+
+    InitializeCriticalSection(m);
+    return 0;
+}
+
+int pthread_mutex_destroy(pthread_mutex_t *m)
+{
+    DeleteCriticalSection(m);
+    return 0;
+}
+
+int pthread_mutex_lock(pthread_mutex_t *m)
+{
+    EnterCriticalSection(m);
+    return 0;
+}
+
+int pthread_mutex_unlock(pthread_mutex_t *m)
+{
+    LeaveCriticalSection(m);
+    return 0;
+}
+
+int pthread_mutex_trylock(pthread_mutex_t *m)
+{
+    return TryEnterCriticalSection(m) ? 0 : EBUSY;
+}
+
+static unsigned long long _pthread_time_in_ms_from_timespec(const struct timespec *ts)
+{
+    unsigned long long t = ts->tv_sec * 1000;
+    t += ts->tv_nsec / 1000000;
+
+    return t;
+}
+
+static unsigned long long _pthread_time_in_ms(void)
+{
+    struct __timeb64 tb;
+    _ftime64(&tb);
+
+    return tb.time * 1000 + tb.millitm;
+}
+
+static unsigned long long _pthread_rel_time_in_ms(const struct timespec *ts)
+{
+    unsigned long long t1 = _pthread_time_in_ms_from_timespec(ts);
+    unsigned long long t2 = _pthread_time_in_ms();
+
+    if (t1 < t2) return 1;
+    return t1 - t2;
+}
+
+int pthread_cond_init(pthread_cond_t *c, pthread_condattr_t *a)
+{
+    (void) a;
+
+    InitializeConditionVariable(c);
+    return 0;
+}
+
+int pthread_cond_destroy(pthread_cond_t *c)
+{
+    (void)c;
+    return 0;
+}
+
+int pthread_cond_signal(pthread_cond_t *c)
+{
+    WakeConditionVariable(c);
+    return 0;
+}
+
+int pthread_cond_broadcast(pthread_cond_t *c)
+{
+    WakeAllConditionVariable(c);
+    return 0;
+}
+
+int pthread_cond_wait(pthread_cond_t *c, pthread_mutex_t *m)
+{
+    SleepConditionVariableCS(c, m, INFINITE);
+    return 0;
+}
+
+int pthread_cond_timedwait(pthread_cond_t *c, pthread_mutex_t *m, struct timespec *t)
+{
+    unsigned long long tm = _pthread_rel_time_in_ms(t);
+
+    if (!SleepConditionVariableCS(c, m, tm))
+        return ETIMEDOUT;
+    if (!_pthread_rel_time_in_ms(t))
+        return ETIMEDOUT;
+
+    return 0;
+}
+
+#endif
diff -wuN a/vendor/quickjs/w32_compat.h b/vendor/quickjs/w32_compat.h
--- a/vendor/quickjs/w32_compat.h	1970-01-01 01:00:00.000000000 +0100
+++ b/vendor/quickjs/w32_compat.h	2019-07-12 18:51:50.608100000 +0200
@@ -0,0 +1,53 @@
+// Hacks for Clang support on Windows (Niels)
+
+#ifndef W32_COMPAT_H
+#define W32_COMPAT_H
+
+#if defined(_WIN32)
+
+#include <inttypes.h>
+#include <winsock.h>
+
+typedef intptr_t ssize_t;
+
+typedef struct { int dummy; } pthread_mutexattr_t;
+typedef struct { int dummy; } pthread_condattr_t;
+
+typedef struct {
+    void *DebugInfo;
+    long LockCount;
+    long RecursionCount;
+    void *OwningThread;
+    void *LockSemaphore;
+    uintptr_t SpinCount;
+} pthread_mutex_t;
+
+typedef struct {
+    void *ptr;
+} pthread_cond_t;
+
+#define CLOCK_REALTIME 0
+// #define CLOCK_MONOTONIC 1
+
+#define PTHREAD_MUTEX_INITIALIZER {(void*)-1, -1, 0, 0, 0, 0}
+#define PTHREAD_COND_INITIALIZER {0}
+
+int clock_gettime(int clock, struct timespec *spec);
+int gettimeofday(struct timeval *tp, struct timezone *tzp);
+
+int pthread_mutex_init(pthread_mutex_t *m, pthread_mutexattr_t *a);
+int pthread_mutex_destroy(pthread_mutex_t *m);
+int pthread_mutex_lock(pthread_mutex_t *m);
+int pthread_mutex_unlock(pthread_mutex_t *m);
+int pthread_mutex_trylock(pthread_mutex_t *m);
+
+int pthread_cond_init(pthread_cond_t *c, pthread_condattr_t *a);
+int pthread_cond_destroy(pthread_cond_t *c);
+int pthread_cond_signal(pthread_cond_t *c);
+int pthread_cond_broadcast(pthread_cond_t *c);
+int pthread_cond_wait(pthread_cond_t *c, pthread_mutex_t *m);
+int pthread_cond_timedwait(pthread_cond_t *c, pthread_mutex_t *m, struct timespec *t);
+
+#endif
+
+#endif
