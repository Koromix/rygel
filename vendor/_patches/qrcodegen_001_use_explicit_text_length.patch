diff --git a/vendor/qrcodegen/qrcodegen-demo.c b/vendor/qrcodegen/qrcodegen-demo.c
index d925f4e32..a80dc28f2 100644
--- a/vendor/qrcodegen/qrcodegen-demo.c
+++ b/vendor/qrcodegen/qrcodegen-demo.c
@@ -61,7 +61,7 @@ static void doBasicDemo(void) {
 	// Make and print the QR Code symbol
 	uint8_t qrcode[qrcodegen_BUFFER_LEN_MAX];
 	uint8_t tempBuffer[qrcodegen_BUFFER_LEN_MAX];
-	bool ok = qrcodegen_encodeText(text, tempBuffer, qrcode, errCorLvl,
+	bool ok = qrcodegen_encodeText(text, strlen(text), tempBuffer, qrcode, errCorLvl,
 		qrcodegen_VERSION_MIN, qrcodegen_VERSION_MAX, qrcodegen_Mask_AUTO, true);
 	if (ok)
 		printQr(qrcode);
@@ -71,18 +71,20 @@ static void doBasicDemo(void) {
 // Creates a variety of QR Codes that exercise different features of the library, and prints each one to the console.
 static void doVarietyDemo(void) {
 	{  // Numeric mode encoding (3.33 bits per digit)
+		const char *text = "314159265358979323846264338327950288419716939937510";
 		uint8_t qrcode[qrcodegen_BUFFER_LEN_MAX];
 		uint8_t tempBuffer[qrcodegen_BUFFER_LEN_MAX];
-		bool ok = qrcodegen_encodeText("314159265358979323846264338327950288419716939937510", tempBuffer, qrcode,
+		bool ok = qrcodegen_encodeText(text, strlen(text), tempBuffer, qrcode,
 			qrcodegen_Ecc_MEDIUM, qrcodegen_VERSION_MIN, qrcodegen_VERSION_MAX, qrcodegen_Mask_AUTO, true);
 		if (ok)
 			printQr(qrcode);
 	}
 	
 	{  // Alphanumeric mode encoding (5.5 bits per character)
+		const char *text = "DOLLAR-AMOUNT:$39.87 PERCENTAGE:100.00% OPERATIONS:+-*/";
 		uint8_t qrcode[qrcodegen_BUFFER_LEN_MAX];
 		uint8_t tempBuffer[qrcodegen_BUFFER_LEN_MAX];
-		bool ok = qrcodegen_encodeText("DOLLAR-AMOUNT:$39.87 PERCENTAGE:100.00% OPERATIONS:+-*/", tempBuffer, qrcode,
+		bool ok = qrcodegen_encodeText(text, strlen(text), tempBuffer, qrcode,
 			qrcodegen_Ecc_HIGH, qrcodegen_VERSION_MIN, qrcodegen_VERSION_MAX, qrcodegen_Mask_AUTO, true);
 		if (ok)
 			printQr(qrcode);
@@ -93,7 +95,7 @@ static void doVarietyDemo(void) {
 			"\xE4\xB8\x96\xE7\x95\x8C\xEF\xBC\x81\x20\xCE\xB1\xCE\xB2\xCE\xB3\xCE\xB4";
 		uint8_t qrcode[qrcodegen_BUFFER_LEN_MAX];
 		uint8_t tempBuffer[qrcodegen_BUFFER_LEN_MAX];
-		bool ok = qrcodegen_encodeText(text, tempBuffer, qrcode,
+		bool ok = qrcodegen_encodeText(text, strlen(text), tempBuffer, qrcode,
 			qrcodegen_Ecc_QUARTILE, qrcodegen_VERSION_MIN, qrcodegen_VERSION_MAX, qrcodegen_Mask_AUTO, true);
 		if (ok)
 			printQr(qrcode);
@@ -110,7 +112,7 @@ static void doVarietyDemo(void) {
 			"a White Rabbit with pink eyes ran close by her.";
 		uint8_t qrcode[qrcodegen_BUFFER_LEN_MAX];
 		uint8_t tempBuffer[qrcodegen_BUFFER_LEN_MAX];
-		bool ok = qrcodegen_encodeText(text, tempBuffer, qrcode,
+		bool ok = qrcodegen_encodeText(text, strlen(text), tempBuffer, qrcode,
 			qrcodegen_Ecc_HIGH, qrcodegen_VERSION_MIN, qrcodegen_VERSION_MAX, qrcodegen_Mask_AUTO, true);
 		if (ok)
 			printQr(qrcode);
@@ -134,7 +136,7 @@ static void doSegmentDemo(void) {
 			}
 			strcat(concat, silver0);
 			strcat(concat, silver1);
-			ok = qrcodegen_encodeText(concat, tempBuffer, qrcode, qrcodegen_Ecc_LOW,
+			ok = qrcodegen_encodeText(concat, strlen(concat), tempBuffer, qrcode, qrcodegen_Ecc_LOW,
 				qrcodegen_VERSION_MIN, qrcodegen_VERSION_MAX, qrcodegen_Mask_AUTO, true);
 			if (ok)
 				printQr(qrcode);
@@ -175,7 +177,7 @@ static void doSegmentDemo(void) {
 			strcat(concat, golden0);
 			strcat(concat, golden1);
 			strcat(concat, golden2);
-			ok = qrcodegen_encodeText(concat, tempBuffer, qrcode, qrcodegen_Ecc_LOW,
+			ok = qrcodegen_encodeText(concat, strlen(concat), tempBuffer, qrcode, qrcodegen_Ecc_LOW,
 				qrcodegen_VERSION_MIN, qrcodegen_VERSION_MAX, qrcodegen_Mask_AUTO, true);
 			if (ok)
 				printQr(qrcode);
@@ -226,7 +228,7 @@ static void doSegmentDemo(void) {
 				"\xEF\xBD\x84\xEF\xBD\x85\xEF\xBD\x93\xEF"
 				"\xBD\x95\xE3\x80\x80\xCE\xBA\xCE\xB1\xEF"
 				"\xBC\x9F";
-			ok = qrcodegen_encodeText(madoka, tempBuffer, qrcode, qrcodegen_Ecc_LOW,
+			ok = qrcodegen_encodeText(madoka, strlen(madoka), tempBuffer, qrcode, qrcodegen_Ecc_LOW,
 				qrcodegen_VERSION_MIN, qrcodegen_VERSION_MAX, qrcodegen_Mask_AUTO, true);
 			if (ok)
 				printQr(qrcode);
@@ -267,16 +269,17 @@ static void doSegmentDemo(void) {
 // Creates QR Codes with the same size and contents but different mask patterns.
 static void doMaskDemo(void) {
 	{  // Project Nayuki URL
+		const char *url = "https://www.nayuki.io/";
 		uint8_t qrcode[qrcodegen_BUFFER_LEN_MAX];
 		uint8_t tempBuffer[qrcodegen_BUFFER_LEN_MAX];
 		bool ok;
 		
-		ok = qrcodegen_encodeText("https://www.nayuki.io/", tempBuffer, qrcode,
+		ok = qrcodegen_encodeText(url, strlen(url), tempBuffer, qrcode,
 			qrcodegen_Ecc_HIGH, qrcodegen_VERSION_MIN, qrcodegen_VERSION_MAX, qrcodegen_Mask_AUTO, true);
 		if (ok)
 			printQr(qrcode);
 		
-		ok = qrcodegen_encodeText("https://www.nayuki.io/", tempBuffer, qrcode,
+		ok = qrcodegen_encodeText(url, strlen(url), tempBuffer, qrcode,
 			qrcodegen_Ecc_HIGH, qrcodegen_VERSION_MIN, qrcodegen_VERSION_MAX, qrcodegen_Mask_3, true);
 		if (ok)
 			printQr(qrcode);
@@ -295,22 +298,22 @@ static void doMaskDemo(void) {
 		uint8_t tempBuffer[qrcodegen_BUFFER_LEN_MAX];
 		bool ok;
 		
-		ok = qrcodegen_encodeText(text, tempBuffer, qrcode,
+		ok = qrcodegen_encodeText(text, strlen(text), tempBuffer, qrcode,
 			qrcodegen_Ecc_MEDIUM, qrcodegen_VERSION_MIN, qrcodegen_VERSION_MAX, qrcodegen_Mask_0, true);
 		if (ok)
 			printQr(qrcode);
 		
-		ok = qrcodegen_encodeText(text, tempBuffer, qrcode,
+		ok = qrcodegen_encodeText(text, strlen(text), tempBuffer, qrcode,
 			qrcodegen_Ecc_MEDIUM, qrcodegen_VERSION_MIN, qrcodegen_VERSION_MAX, qrcodegen_Mask_1, true);
 		if (ok)
 			printQr(qrcode);
 		
-		ok = qrcodegen_encodeText(text, tempBuffer, qrcode,
+		ok = qrcodegen_encodeText(text, strlen(text), tempBuffer, qrcode,
 			qrcodegen_Ecc_MEDIUM, qrcodegen_VERSION_MIN, qrcodegen_VERSION_MAX, qrcodegen_Mask_5, true);
 		if (ok)
 			printQr(qrcode);
 		
-		ok = qrcodegen_encodeText(text, tempBuffer, qrcode,
+		ok = qrcodegen_encodeText(text, strlen(text), tempBuffer, qrcode,
 			qrcodegen_Ecc_MEDIUM, qrcodegen_VERSION_MIN, qrcodegen_VERSION_MAX, qrcodegen_Mask_7, true);
 		if (ok)
 			printQr(qrcode);
diff --git a/vendor/qrcodegen/qrcodegen-test.c b/vendor/qrcodegen/qrcodegen-test.c
index d8863683b..97622906d 100644
--- a/vendor/qrcodegen/qrcodegen-test.c
+++ b/vendor/qrcodegen/qrcodegen-test.c
@@ -553,7 +553,7 @@ static void testIsAlphanumeric(void) {
 		{false, "\xFF"},
 	};
 	for (size_t i = 0; i < ARRAY_LENGTH(cases); i++) {
-		assert(qrcodegen_isAlphanumeric(cases[i].text) == cases[i].answer);
+		assert(qrcodegen_isAlphanumeric(cases[i].text, strlen(cases[i].text)) == cases[i].answer);
 		numTestCases++;
 	}
 }
@@ -586,7 +586,7 @@ static void testIsNumeric(void) {
 		{false, "\xFF"},
 	};
 	for (size_t i = 0; i < ARRAY_LENGTH(cases); i++) {
-		assert(qrcodegen_isNumeric(cases[i].text) == cases[i].answer);
+		assert(qrcodegen_isNumeric(cases[i].text, strlen(cases[i].text)) == cases[i].answer);
 		numTestCases++;
 	}
 }
diff --git a/vendor/qrcodegen/qrcodegen.c b/vendor/qrcodegen/qrcodegen.c
index 871bc9243..f8a2c3dc4 100644
--- a/vendor/qrcodegen/qrcodegen.c
+++ b/vendor/qrcodegen/qrcodegen.c
@@ -129,23 +129,22 @@ static const int PENALTY_N4 = 10;
 /*---- High-level QR Code encoding functions ----*/
 
 // Public function - see documentation comment in header file.
-bool qrcodegen_encodeText(const char *text, uint8_t tempBuffer[], uint8_t qrcode[],
+bool qrcodegen_encodeText(const char *text, size_t textLen, uint8_t tempBuffer[], uint8_t qrcode[],
 		enum qrcodegen_Ecc ecl, int minVersion, int maxVersion, enum qrcodegen_Mask mask, bool boostEcl) {
 	
-	size_t textLen = strlen(text);
 	if (textLen == 0)
 		return qrcodegen_encodeSegmentsAdvanced(NULL, 0, ecl, minVersion, maxVersion, mask, boostEcl, tempBuffer, qrcode);
 	size_t bufLen = (size_t)qrcodegen_BUFFER_LEN_FOR_VERSION(maxVersion);
 	
 	struct qrcodegen_Segment seg;
-	if (qrcodegen_isNumeric(text)) {
+	if (qrcodegen_isNumeric(text, textLen)) {
 		if (qrcodegen_calcSegmentBufferSize(qrcodegen_Mode_NUMERIC, textLen) > bufLen)
 			goto fail;
-		seg = qrcodegen_makeNumeric(text, tempBuffer);
-	} else if (qrcodegen_isAlphanumeric(text)) {
+		seg = qrcodegen_makeNumeric(text, textLen, tempBuffer);
+	} else if (qrcodegen_isAlphanumeric(text, textLen)) {
 		if (qrcodegen_calcSegmentBufferSize(qrcodegen_Mode_ALPHANUMERIC, textLen) > bufLen)
 			goto fail;
-		seg = qrcodegen_makeAlphanumeric(text, tempBuffer);
+		seg = qrcodegen_makeAlphanumeric(text, textLen, tempBuffer);
 	} else {
 		if (textLen > bufLen)
 			goto fail;
@@ -810,9 +809,9 @@ static bool getBit(int x, int i) {
 /*---- Segment handling ----*/
 
 // Public function - see documentation comment in header file.
-bool qrcodegen_isNumeric(const char *text) {
-	assert(text != NULL);
-	for (; *text != '\0'; text++) {
+bool qrcodegen_isNumeric(const char *text, size_t textLen) {
+	assert(text != NULL || textLen == 0);
+	for (; textLen; text++, textLen--) {
 		if (*text < '0' || *text > '9')
 			return false;
 	}
@@ -821,9 +820,9 @@ bool qrcodegen_isNumeric(const char *text) {
 
 
 // Public function - see documentation comment in header file.
-bool qrcodegen_isAlphanumeric(const char *text) {
-	assert(text != NULL);
-	for (; *text != '\0'; text++) {
+bool qrcodegen_isAlphanumeric(const char *text, size_t textLen) {
+	assert(text != NULL || textLen == 0);
+	for (; textLen; text++, textLen--) {
 		if (strchr(ALPHANUMERIC_CHARSET, *text) == NULL)
 			return false;
 	}
@@ -891,10 +890,9 @@ struct qrcodegen_Segment qrcodegen_makeBytes(const uint8_t data[], size_t len, u
 
 
 // Public function - see documentation comment in header file.
-struct qrcodegen_Segment qrcodegen_makeNumeric(const char *digits, uint8_t buf[]) {
-	assert(digits != NULL);
+struct qrcodegen_Segment qrcodegen_makeNumeric(const char *digits, size_t len, uint8_t buf[]) {
+	assert(digits != NULL || len == 0);
 	struct qrcodegen_Segment result;
-	size_t len = strlen(digits);
 	result.mode = qrcodegen_Mode_NUMERIC;
 	int bitLen = calcSegmentBitLength(result.mode, len);
 	assert(bitLen != LENGTH_OVERFLOW);
@@ -925,10 +923,9 @@ struct qrcodegen_Segment qrcodegen_makeNumeric(const char *digits, uint8_t buf[]
 
 
 // Public function - see documentation comment in header file.
-struct qrcodegen_Segment qrcodegen_makeAlphanumeric(const char *text, uint8_t buf[]) {
-	assert(text != NULL);
+struct qrcodegen_Segment qrcodegen_makeAlphanumeric(const char *text, size_t len, uint8_t buf[]) {
+	assert(text != NULL || len == 0);
 	struct qrcodegen_Segment result;
-	size_t len = strlen(text);
 	result.mode = qrcodegen_Mode_ALPHANUMERIC;
 	int bitLen = calcSegmentBitLength(result.mode, len);
 	assert(bitLen != LENGTH_OVERFLOW);
diff --git a/vendor/qrcodegen/qrcodegen.h b/vendor/qrcodegen/qrcodegen.h
index 6bbc15762..cf8285b55 100644
--- a/vendor/qrcodegen/qrcodegen.h
+++ b/vendor/qrcodegen/qrcodegen.h
@@ -184,7 +184,7 @@ struct qrcodegen_Segment {
  * Please consult the QR Code specification for information on
  * data capacities per version, ECC level, and text encoding mode.
  */
-bool qrcodegen_encodeText(const char *text, uint8_t tempBuffer[], uint8_t qrcode[],
+bool qrcodegen_encodeText(const char *text, size_t textLen, uint8_t tempBuffer[], uint8_t qrcode[],
 	enum qrcodegen_Ecc ecl, int minVersion, int maxVersion, enum qrcodegen_Mask mask, bool boostEcl);
 
 
@@ -307,7 +307,7 @@ bool qrcodegen_encodeSegmentsAdvanced(const struct qrcodegen_Segment segs[], siz
  * Tests whether the given string can be encoded as a segment in numeric mode.
  * A string is encodable iff each character is in the range 0 to 9.
  */
-bool qrcodegen_isNumeric(const char *text);
+bool qrcodegen_isNumeric(const char *text, size_t textLen);
 
 
 /* 
@@ -315,7 +315,7 @@ bool qrcodegen_isNumeric(const char *text);
  * A string is encodable iff each character is in the following set: 0 to 9, A to Z
  * (uppercase only), space, dollar, percent, asterisk, plus, hyphen, period, slash, colon.
  */
-bool qrcodegen_isAlphanumeric(const char *text);
+bool qrcodegen_isAlphanumeric(const char *text, size_t textLen);
 
 
 /* 
@@ -343,7 +343,7 @@ struct qrcodegen_Segment qrcodegen_makeBytes(const uint8_t data[], size_t len, u
 /* 
  * Returns a segment representing the given string of decimal digits encoded in numeric mode.
  */
-struct qrcodegen_Segment qrcodegen_makeNumeric(const char *digits, uint8_t buf[]);
+struct qrcodegen_Segment qrcodegen_makeNumeric(const char *digits, size_t len, uint8_t buf[]);
 
 
 /* 
@@ -351,7 +351,7 @@ struct qrcodegen_Segment qrcodegen_makeNumeric(const char *digits, uint8_t buf[]
  * The characters allowed are: 0 to 9, A to Z (uppercase only), space,
  * dollar, percent, asterisk, plus, hyphen, period, slash, colon.
  */
-struct qrcodegen_Segment qrcodegen_makeAlphanumeric(const char *text, uint8_t buf[]);
+struct qrcodegen_Segment qrcodegen_makeAlphanumeric(const char *text, size_t len, uint8_t buf[]);
 
 
 /* 
