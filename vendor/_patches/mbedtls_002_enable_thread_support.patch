diff --git a/vendor/mbedtls/include/mbedtls/check_config.h b/vendor/mbedtls/include/mbedtls/check_config.h
index 04e43e39d..53589b58f 100644
--- a/vendor/mbedtls/include/mbedtls/check_config.h
+++ b/vendor/mbedtls/include/mbedtls/check_config.h
@@ -962,6 +962,13 @@
 #define MBEDTLS_THREADING_IMPL
 #endif
 
+#if defined(MBEDTLS_THREADING_WIN32)
+#if !defined(MBEDTLS_THREADING_C) || defined(MBEDTLS_THREADING_IMPL)
+#error "MBEDTLS_THREADING_WIN32 defined, but not all prerequisites"
+#endif
+#define MBEDTLS_THREADING_IMPL
+#endif
+
 #if defined(MBEDTLS_THREADING_ALT)
 #if !defined(MBEDTLS_THREADING_C) || defined(MBEDTLS_THREADING_IMPL)
 #error "MBEDTLS_THREADING_ALT defined, but not all prerequisites"
diff --git a/vendor/mbedtls/include/mbedtls/mbedtls_config.h b/vendor/mbedtls/include/mbedtls/mbedtls_config.h
index 78c363543..3ff7f744c 100644
--- a/vendor/mbedtls/include/mbedtls/mbedtls_config.h
+++ b/vendor/mbedtls/include/mbedtls/mbedtls_config.h
@@ -1903,7 +1903,11 @@
  *
  * Uncomment this to enable pthread mutexes.
  */
-//#define MBEDTLS_THREADING_PTHREAD
+#ifdef _WIN32
+#  define MBEDTLS_THREADING_WIN32
+#else
+#  define MBEDTLS_THREADING_PTHREAD
+#endif
 
 /**
  * \def MBEDTLS_USE_PSA_CRYPTO
@@ -3283,7 +3287,7 @@
  *
  * Enable this layer to allow use of mutexes within mbed TLS
  */
-//#define MBEDTLS_THREADING_C
+#define MBEDTLS_THREADING_C
 
 /**
  * \def MBEDTLS_TIMING_C
diff --git a/vendor/mbedtls/include/mbedtls/threading.h b/vendor/mbedtls/include/mbedtls/threading.h
index f6173f595..1c0284334 100644
--- a/vendor/mbedtls/include/mbedtls/threading.h
+++ b/vendor/mbedtls/include/mbedtls/threading.h
@@ -48,6 +48,21 @@ typedef struct mbedtls_threading_mutex_t
 } mbedtls_threading_mutex_t;
 #endif
 
+#if defined(MBEDTLS_THREADING_WIN32)
+typedef struct mbedtls_threading_mutex_t
+{
+#if defined(_WIN64)
+    struct { uint64_t dummy[5]; } MBEDTLS_PRIVATE(cs); // CRITICAL_SECTION
+#elif defined(_WIN32)
+    struct { uint32_t dummy[6]; } MBEDTLS_PRIVATE(cs); // CRITICAL_SECTION
+#endif
+    /* is_valid is 0 after a failed init or a free, and nonzero after a
+     * successful init. This field is not considered part of the public
+     * API of Mbed TLS and may change without notice. */
+    char MBEDTLS_PRIVATE(is_valid);
+} mbedtls_threading_mutex_t;
+#endif
+
 #if defined(MBEDTLS_THREADING_ALT)
 /* You should define the mbedtls_threading_mutex_t type in your header */
 #include "threading_alt.h"
diff --git a/vendor/mbedtls/library/threading.c b/vendor/mbedtls/library/threading.c
index cd9942bf6..7d845bad5 100644
--- a/vendor/mbedtls/library/threading.c
+++ b/vendor/mbedtls/library/threading.c
@@ -119,6 +119,61 @@ int (*mbedtls_mutex_unlock)( mbedtls_threading_mutex_t * ) = threading_mutex_unl
 
 #endif /* MBEDTLS_THREADING_PTHREAD */
 
+#if defined(MBEDTLS_THREADING_WIN32)
+#include <windows.h>
+
+static void threading_mutex_init_win32( mbedtls_threading_mutex_t *mutex )
+{
+    if( mutex == NULL )
+        return;
+
+    /* A nonzero value of is_valid indicates a successfully initialized
+     * mutex. This is a workaround for not being able to return an error
+     * code for this function. The lock/unlock functions return an error
+     * if is_valid is nonzero. The Mbed TLS unit test code uses this field
+     * to distinguish more states of the mutex; see
+     * tests/src/threading_helpers for details. */
+    InitializeCriticalSection( (CRITICAL_SECTION *)&mutex->cs );
+    mutex->is_valid = 1;
+}
+
+static void threading_mutex_free_win32( mbedtls_threading_mutex_t *mutex )
+{
+    if( mutex == NULL || !mutex->is_valid )
+        return;
+
+    DeleteCriticalSection( (CRITICAL_SECTION *)&mutex->cs );
+    mutex->is_valid = 0;
+}
+
+static int threading_mutex_lock_win32( mbedtls_threading_mutex_t *mutex )
+{
+    if( mutex == NULL || ! mutex->is_valid )
+        return( MBEDTLS_ERR_THREADING_BAD_INPUT_DATA );
+
+    EnterCriticalSection( (CRITICAL_SECTION *)&mutex->cs );
+    return( 0 );
+}
+
+static int threading_mutex_unlock_win32( mbedtls_threading_mutex_t *mutex )
+{
+    if( mutex == NULL || ! mutex->is_valid )
+        return( MBEDTLS_ERR_THREADING_BAD_INPUT_DATA );
+
+    LeaveCriticalSection( (CRITICAL_SECTION *)&mutex->cs );
+    return( 0 );
+}
+
+void (*mbedtls_mutex_init)( mbedtls_threading_mutex_t * ) = threading_mutex_init_win32;
+void (*mbedtls_mutex_free)( mbedtls_threading_mutex_t * ) = threading_mutex_free_win32;
+int (*mbedtls_mutex_lock)( mbedtls_threading_mutex_t * ) = threading_mutex_lock_win32;
+int (*mbedtls_mutex_unlock)( mbedtls_threading_mutex_t * ) = threading_mutex_unlock_win32;
+
+/* We don't need to initialize mbedtls_threading_readdir_mutex and
+   mbedtls_threading_gmtime_mutex because they are not used on Windows. */
+
+#endif /* MBEDTLS_THREADING_WIN32 */
+
 #if defined(MBEDTLS_THREADING_ALT)
 static int threading_mutex_fail( mbedtls_threading_mutex_t *mutex )
 {
@@ -177,7 +232,7 @@ void mbedtls_threading_free_alt( void )
 #ifndef MUTEX_INIT
 #define MUTEX_INIT
 #endif
-#if defined(MBEDTLS_FS_IO)
+#if defined(MBEDTLS_FS_IO) && !defined(_WIN32)
 mbedtls_threading_mutex_t mbedtls_threading_readdir_mutex MUTEX_INIT;
 #endif
 #if defined(THREADING_USE_GMTIME)
