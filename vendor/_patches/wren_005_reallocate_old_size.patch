diff --git a/vendor/wren/src/include/wren.h b/vendor/wren/src/include/wren.h
index ea0175b0d..4d98204c6 100644
--- a/vendor/wren/src/include/wren.h
+++ b/vendor/wren/src/include/wren.h
@@ -55,7 +55,7 @@ typedef struct WrenHandle WrenHandle;
 //
 // - To free memory, [memory] will be the memory to free and [newSize] will be
 //   zero. It should return NULL.
-typedef void* (*WrenReallocateFn)(void* memory, size_t newSize, void* userData);
+typedef void* (*WrenReallocateFn)(void* memory, size_t oldSize, size_t newSize, void *userData);
 
 // A function callable from Wren code, but implemented in C.
 typedef void (*WrenForeignMethodFn)(WrenVM* vm);
diff --git a/vendor/wren/src/vm/wren_value.c b/vendor/wren/src/vm/wren_value.c
index c49a3b6be..ecfc9d932 100644
--- a/vendor/wren/src/vm/wren_value.c
+++ b/vendor/wren/src/vm/wren_value.c
@@ -987,10 +987,12 @@ void wrenGrayObj(WrenVM* vm, Obj* obj)
   // more marks later.
   if (vm->grayCount >= vm->grayCapacity)
   {
-    vm->grayCapacity = vm->grayCount * 2;
+    int newGrayCapacity = vm->grayCount * 2;
     vm->gray = (Obj**)vm->config.reallocateFn(vm->gray,
                                               vm->grayCapacity * sizeof(Obj*),
+                                              newGrayCapacity * sizeof(Obj*),
                                               vm->config.userData);
+    vm->grayCapacity = newGrayCapacity;
   }
 
   vm->gray[vm->grayCount++] = obj;
diff --git a/vendor/wren/src/vm/wren_vm.c b/vendor/wren/src/vm/wren_vm.c
index 8d75d1581..3c49048ad 100644
--- a/vendor/wren/src/vm/wren_vm.c
+++ b/vendor/wren/src/vm/wren_vm.c
@@ -25,7 +25,7 @@
 // may return a non-NULL pointer which must not be dereferenced but nevertheless
 // should be freed. To prevent that, we avoid calling realloc() with a zero
 // size.
-static void* defaultReallocate(void* ptr, size_t newSize, void* _)
+static void* defaultReallocate(void* ptr, size_t oldSize, size_t newSize, void* _)
 {
   if (newSize == 0)
   {
@@ -67,7 +67,7 @@ WrenVM* wrenNewVM(WrenConfiguration* config)
     reallocate = config->reallocateFn ? config->reallocateFn : defaultReallocate;
   }
   
-  WrenVM* vm = (WrenVM*)reallocate(NULL, sizeof(*vm), userData);
+  WrenVM* vm = (WrenVM*)reallocate(NULL, 0, sizeof(*vm), userData);
   memset(vm, 0, sizeof(WrenVM));
 
   // Copy the configuration if given one.
@@ -90,7 +90,7 @@ WrenVM* wrenNewVM(WrenConfiguration* config)
   vm->grayCount = 0;
   // TODO: Tune this.
   vm->grayCapacity = 4;
-  vm->gray = (Obj**)reallocate(NULL, vm->grayCapacity * sizeof(Obj*), userData);
+  vm->gray = (Obj**)reallocate(NULL, 0, vm->grayCapacity * sizeof(Obj*), userData);
   vm->nextGC = vm->config.initialHeapSize;
 
   wrenSymbolTableInit(&vm->methodNames);
@@ -121,7 +121,7 @@ void wrenFreeVM(WrenVM* vm)
   }
 
   // Free up the GC gray set.
-  vm->gray = (Obj**)vm->config.reallocateFn(vm->gray, 0, vm->config.userData);
+  vm->gray = (Obj**)vm->config.reallocateFn(vm->gray, vm->grayCapacity * sizeof(Obj*), 0, vm->config.userData);
 
   // Tell the user if they didn't free any handles. We don't want to just free
   // them here because the host app may still have pointers to them that they
@@ -258,7 +258,7 @@ void* wrenReallocate(WrenVM* vm, void* memory, size_t oldSize, size_t newSize)
 #endif
   }
 
-  return vm->config.reallocateFn(memory, newSize, vm->config.userData);
+  return vm->config.reallocateFn(memory, oldSize, newSize, vm->config.userData);
 }
 
 // Captures the local variable [local] into an [Upvalue]. If that local is
