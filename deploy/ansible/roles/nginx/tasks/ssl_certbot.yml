# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see https://www.gnu.org/licenses/.

- name: Create self-signed certificate for default server
  command:
    cmd: 'openssl req -x509 -newkey rsa:2048 -keyout /opt/nginx/ssl/self.key -out /opt/nginx/ssl/self.crt -days 372 -nodes -subj "/CN=default"'
    creates: /opt/nginx/ssl/self.crt
  become: yes

- name: Bootstrap Let's Encrypt configuration directories
  file:
    path: '{{ item }}'
    state: directory
    owner: root
    group: root
    mode: '0755'
  loop:
    - '/etc/letsencrypt'
    - '/etc/letsencrypt/live'
  become: yes

- name: Bootstrap missing Let's Encrypt domain directories
  file:
    path: '/etc/letsencrypt/live/{{ item.name }}'
    state: directory
    owner: root
    group: root
    mode: '0700'
  loop: '{{ nginx_domains }}'
  become: yes

- name: Bootstrap missing Let's Encrypt private keys
  copy:
    src: '/opt/nginx/ssl/internal/{{ inventory_hostname }}.key'
    remote_src: yes
    dest: '/etc/letsencrypt/live/{{ item.name }}/privkey.pem'
    mode: '0600'
    force: no
  loop: '{{ nginx_domains }}'
  become: yes

- name: Bootstrap missing Let's Encrypt certificates
  copy:
    src: '/opt/nginx/ssl/internal/{{ inventory_hostname }}.crt'
    remote_src: yes
    dest: '/etc/letsencrypt/live/{{ item.name }}/fullchain.pem'
    mode: '0600'
    force: no
  loop: '{{ nginx_domains }}'
  become: yes

- name: Reload NGINX (for certbot)
  service:
    name: nginx
    state: reloaded
  when: 'nginx_config.changed and not ansible_check_mode'
  become: yes

- name: Prepare webroot directories for certbot
  file:
    path: '/opt/nginx/ssl/webroot/{{ item.name }}'
    state: directory
    owner: root
    group: root
    mode: '0755'
  loop: '{{ nginx_domains }}'
  when: 'item.ssl_certbot_email is defined'
  become: yes

- name: Generate Let's Encrypt certificates
  shell:
    cmd: |
      rm -rf /etc/letsencrypt/live/{{ item.name }} /etc/letsencrypt/renewal/{{ item.name }}.conf /etc/letsencrypt/archive/{{ item.name }}
      certbot certonly --cert-name {{ item.name }} --webroot --preferred-challenges http -w /opt/nginx/ssl/webroot/{{ item.name }} -d {{ item.name }} -m {{ item.ssl_certbot_email }} --agree-tos --noninteractive
    creates: '/etc/letsencrypt/live/{{ item.name }}/chain.pem'
    warn: false
  loop: '{{ nginx_domains }}'
  when: 'item.ssl_certbot_email is defined'
  become: yes

- name: Enable certbot renewal unit
  service:
    name: certbot.timer
    enabled: yes
  become: yes

- name: List old certbot renewals
  find:
    paths:
      - /etc/letsencrypt/renewal
      - /etc/letsencrypt/archive
      - /etc/letsencrypt/live
    file_type: any
    recurse: no
    exclude: |
      {{ nginx_domains | map(attribute = "name") | list |
         union(nginx_domains | map(attribute = "name") | map("regex_replace", "^(.*)$", "\1.conf") | list) |
         union(["README"]) }}
  register: certbot_old
  become: yes

- name: Clean up old certbot renewals
  file:
    path: '{{ item.path }}'
    state: absent
  loop: '{{ certbot_old.files }}'
  become: yes

- name: Clean up outdated certificate renewal crontab entry
  cron:
    name: letsencrypt_renewal
    state: absent
  become: yes
