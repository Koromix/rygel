#!/usr/bin/env python3

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

import sys
import re
import argparse

def load_words(filename):
    with open(filename, 'r', encoding = 'utf-8') as f:
        lines = (line.strip() for line in f.readlines())
        words = [line for line in lines if len(line) > 0 and not line.startswith('#')]

    return words

def simplify(word):
    word = word.lower()
    parts = re.split('[ ,;:]+', word)

    if len(parts) > 2:
        return None

    if len(parts) == 2:
        word = parts[0]
        frequency = int(parts[1])
    else:
        frequency = 100

    if frequency < 10:
        return None
    if re.match('[0-9]', word):
        return None
    if word.endswith('\'s'):
        return None

    word = re.sub('[ç]', 'c', word)
    word = re.sub('[èéêë]', 'e', word)
    word = re.sub('[àâäå]', 'a', word)
    word = re.sub('[îï]', 'i', word)
    word = re.sub('[ùüûú]', 'u', word)
    word = re.sub('[ñ]', 'y', word)
    word = re.sub('[œ]', 'oe', word)
    word = re.sub('[ôóö]', 'o', word)
    word = re.sub('[ÿ]', 'y', word)
    word = re.sub('[—–\\-]', '', word)

    return word

def write_dict_header(words, f):
    f.write("""// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program. If not, see https://www.gnu.org/licenses/.

// This file is autogenerated by password_dict_gen.py

namespace RG {

static const char pwd_DictRaw[] = {""")
    offsets = []
    offset = 0
    for i, word in enumerate(words):
        if i % 2048 == 0: f.write('\n   ')
        for c in word:
            if ord(c) >= 128:
                print('Complex character in', word, file = sys.stderr)
            f.write(f' 0x{ord(c):02X},')
        f.write(' 0x00,')
        offsets.append(offset)
        offset += len(word) + 1
    f.write("""
};

static const uint32_t pwd_DictWords[] = {""")
    for i, offset in enumerate(offsets):
        if i % 2048 == 0: f.write('\n   ')
        f.write(f' 0x{offset:06X},')
    f.write("""
};

}
""")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description = 'Create password_dict.hh (libpasswd) from dictionaries')
    parser.add_argument('filenames', metavar = 'dictionaries', type = str, nargs = '+',
                        help = 'path to dictionaries')
    args = parser.parse_args()

    raw_words = []
    for filename in args.filenames:
        file_words = load_words(filename)
        raw_words.extend(file_words)

    simplified_words = set((simplify(word) for word in raw_words if len(word) > 3))
    simplified_words = [word for word in simplified_words if word is not None]
    simplified_words.sort()

    write_dict_header(simplified_words, sys.stdout)
