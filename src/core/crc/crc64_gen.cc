// Copyright (C) 2025  Niels Martignène <niels.martignene@protonmail.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the “Software”), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.

#include "src/core/base/base.hh"

namespace RG {

static const uint64_t Crc64XzPoly = 0x42f0e1eba9ea3693ull;
static const uint64_t Crc64NvmePoly = 0xAD93D23594C93659ull;

static Span<const char> FileHeader = R"(// Copyright (C) 2025  Niels Martignène <niels.martignene@protonmail.com>

// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the “Software”), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.

// This file is autogenerated by crc64_gen.sh

namespace RG {

)";
static Span<const char> FileFooter = "};\n";

static uint8_t ReverseBits8(uint8_t b)
{
    b = ((b & 0xF0) >> 4) | ((b & 0x0F) << 4);
    b = ((b & 0xCC) >> 2) | ((b & 0x33) << 2);
    b = ((b & 0xAA) >> 1) | ((b & 0x55) << 1);

    return b;
}

static uint64_t ReverseBits64(uint64_t v)
{
    uint64_t ret = ((uint64_t)ReverseBits8((uint8_t)(v >> 56)) << 0) |
                   ((uint64_t)ReverseBits8((uint8_t)(v >> 48)) << 8) |
                   ((uint64_t)ReverseBits8((uint8_t)(v >> 40)) << 16) |
                   ((uint64_t)ReverseBits8((uint8_t)(v >> 32)) << 24) |
                   ((uint64_t)ReverseBits8((uint8_t)(v >> 24)) << 32) |
                   ((uint64_t)ReverseBits8((uint8_t)(v >> 16)) << 40) |
                   ((uint64_t)ReverseBits8((uint8_t)(v >> 8)) << 48) |
                   ((uint64_t)ReverseBits8((uint8_t)(v >> 0)) << 56);
    return ret;
}

static uint64_t LongDivStep(uint64_t poly, uint64_t m)
{
    uint64_t ret = (m << 1) ^ (m >> 63 ? poly : 0);
    return ret;
}

static void WriteTables(StreamWriter *writer, const char *name, uint64_t poly)
{
    for (int table = 0; table < 16; table++) {
        int count = table * 8 + 8;

        Print(writer, "static uint64_t %1%2[256] = {", name, table);
        for (int i = 0; i < 256; i++) {
            uint64_t value = (uint64_t)ReverseBits8((uint8_t)i) << 56;
            for (int j = 0; j < count; j++) {
                value = LongDivStep(poly, value);
            }
            value = ReverseBits64(value);

            if (i % 6 == 0)
                Print(writer, "\n    ");
            Print(writer, "0x%1ull, ", FmtHex(value).Pad0(-16));
        }
        Print(writer, "\n};\n");
    }

    PrintLn(writer);
 }

int Main(int argc, char **argv)
{
    RG_CRITICAL(argc >= 1, "First argument is missing");

    StdOut->Write(FileHeader);

    WriteTables(StdOut, "Crc64XzTable", Crc64XzPoly);
    WriteTables(StdOut, "Crc64NvmeTable", Crc64NvmePoly);

    StdOut->Write(FileFooter);

    return 0;
}

}

// C++ namespaces are stupid
int main(int argc, char **argv) { return RG::RunApp(argc, argv); }
