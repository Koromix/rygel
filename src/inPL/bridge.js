// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

let bridge = (function() {
    let self = this;

    const DictInfo = {
        sexe: { 'M': 'Homme', 'F': 'Femme', },
        oui_non: { 1: 'Oui', 0: 'Non', },
        oui_non_na: { 1: 'Oui', 0: 'Non', 'na': 'Non applicable', },
        oui_non_plus: { 3: 'Oui, plusieurs fois', 2: 'Oui, une seule fois', 1: 'Non', },
        oui_non_nsp: { 1: 'Oui', 0: 'Non', 99: 'Ne sait pas', },
        freq1: { 4: 'Jamais', 3: 'Parfois', 2: 'Le plus souvent', 1: 'Systématiquement', },
        freq2: { 1: 'Jamais', 2: 'Parfois', 3: 'Souvent', },
        limite: { 3: 'Oui, fortement limité(e)', 2: 'Oui, limité(e) mais pas fortement', 1: 'Non, pas limité(e) du tout', },
        dexterite: { 3: 'Droitier(e)', 2: 'Gaucher(e)', 1: 'Ambidextre', },
        menopause: { 1: 'Avant 40 ans', 0: 'Après 40 ans (40 ans inclus)', '-999': 'Non concernée', },
        npsy_comprehension_frein: { 'A': 'Gène auditive', 'B': 'Gêne visuelle', 'C': 'Illestrisme', 'D': 'Langue maternelle', 'E': 'Trouble de vision des couleurs', 'autre': 'Autre(s)', },
        freqjour1: { 1: 'Jamais ou presque', 2: 'Moins d\'1 fois par jour', 3: '1 à 2 fois par jour', 4: 'Plus de 2 fois par jour', },
        freqjour2: { 1: 'Moins d\'1 fois par jour', 2: '1 à 2 fois par jour', 3: '3 à 5 fois par jour', 4: 'Plus de 5 fois par jour', },
        portion_jour: { 4: 'Moins de 3 portions par jour', 3: '3 à 4 portions par jour', 2: '5 à 7 portions par jour', 1: 'Plus de 7 portions par jour', },
        freqjour3: { 4: 'Moins d\'1 fois par jour', 3: '1 fois par jour', 2: '2 à 3 fois par jour (2 à 4 si plus de 55 ans)', 1: 'Plus de 3 fois par jour (plus de 4 si plus de 55 ans)', },
        freqjour4: { 1: 'Moins d\'1 fois par jour', 0: '1 fois par jour ou plus', },
        freqjour5: { 1: 'Moins d\'1 litre par jour', 0: '1 litre par jour ou plus', },
        beurre: { 1: 'Moins de 125 g par semaine', 2: 'Entre 125 g et 250 g par semaine', 3: 'Plus de 250 g par semaine', },
        habit_alim: { 0: '0', 1: '1', 2: '2', 3: '3', 4: '4', 5: '5', },
        freqsem1: { 4: 'Jamais', 3: '1 à 2 fois par semaine', 2: '3 à 4 fois par semaine', 1: 'Au moins 5 fois par semaine', },
        freqsem2: { 3: 'Jamais', 2: '1 à 2 fois par semaine', 1: 'Au moins 3 fois par semaine', },
        assis: { 1: 'Moins de 2h', 2: '2 à 3h', 3: '3 à 4h', 4: '4 à 5h', 5: 'Plus de 5h', },
        freqmois1: { 1: '1 fois par mois ou moins', 2: '2 à 4 fois par mois', 3: '2 à 3 fois par semaine', 4: '4 fois ou plus par semaine', },
        verres: { 0: '1 ou 2', 1: '3 ou 4', 2: '5 ou 6', 3: '7 à 9', 4: '10 ou plus', },
        freqmois2: { 0: 'Jamais', 1: 'Moins d\'1 fois par mois', 2: '1 fois par mois', 3: '1 fois par semaine', 4: 'Chaque jour ou presque', },
        blesse_alcool: { 0: 'Non', 2: 'Oui, mais pas dans les 12 derniers mois', 4: 'Oui, au cours de 12 derniers mois', },
        oui_reg_non: { 3: 'Oui, régulièrement', 2: 'Oui, de temps en temps', 1: 'Non', },
        cigar_elec: { 1: 'Avec nicotine', 2: 'Sans nicotine', 3: 'Les deux', },
        nb_cigar: { 1: '10 ou moins', 2: '11 à 20', 3: '21 à 30', 4: '31 ou plus', },
        delai_cigar: { 4: 'Moins de 5 min', 3: '6 à 30 min', 2: '31 à 60 min', 1: 'Après plus d\'1 heure', },
        temps_travail: { 1: 'à temps complet', 0: 'à temps partiel', },
        heures_travail: { 1: 'des horaires fixes', 0: 'des horaires décalés', },
        mobilite: { 1: 'Je n\'ai aucun problème pour me déplacer à pied', 2: 'J\'ai des problèmes pour me déplacer à pied', 3: 'Je suis obligé(e) de rester alité(e)', },
        autonomie: { 1: 'Je n\'ai aucun problème pour prendre soin de moi', 2: 'J\'ai des problèmes pour me laver ou m\'habiller seul(e)', 3: 'Je suis incapable de me laver ou de m\'habiller seul(e)', },
        douleurs: { 1: 'Je n\'ai ni douleur ni gêne', 2: 'J\'ai des douleurs ou une gêne modérée(s)', 3: 'J\'ai des douleurs ou une gêne extrême(s)', },
        anxiete: { 1: 'Je ne suis ni anxieux(se) ni déprimé(e)', 2: 'Je suis modérément anxieux(se) ou déprimé(e)', 3: 'Je suis extrêmement anxieux(se) ou déprimé(e)', },
        trouble_sommeil: { 1: 'Troubles d\'endormissement', 2: 'Troubles de maintien du sommeil', 3: 'Réveil précoce', 4: 'Sommeil non récupérateur', 0: 'Je ne présente aucun trouble du sommeil', },
        trouble_diurne: { 1: 'Fatigue/malaise', 2: 'Troubles de l\'attention, de la concentration, de la mémoire', 3: 'Troubles du fonctionnement social', 4: 'Troubles de l\'humeur/irritabilité', 5: 'Somnolence diurne', 6: 'Réduction de la motivation/énergie/initiative', 7: 'Tendance aux erreurs/accidents au travail ou en conduisant', 8: 'Céphalées de tension', 9: 'Préoccupations ou ruminations à propos du sommeil', },
        had1: { 3: 'La plupart du temps', 2: 'Souvent', 1: 'De temps en temps', 0: 'Jamais', },
        had2: { 0: 'Oui, tout autant', 1: 'Pas autant', 2: 'Un peu seulement', 3: 'Presque plus', },
        had3: { 3: 'Oui, très nettement', 2: 'Oui, mais ce n\'est pas trop grave', 1: 'Un peu, mais cela ne m\'inquiète pas', 0: 'Pas du tout', },
        had4: { 0: 'Autant que par le passé', 1: 'Plus autant qu\'avant', 2: 'Vraiment moins qu\'avant', 3: 'Plus du tout ', },
        had5: { 3: 'Très souvent', 2: 'Assez souvent', 1: 'Occasionnellement', 0: 'Très occasionnellement', },
        had6: { 3: 'Jamais', 2: 'Rarement', 1: 'Assez souvent', 0: 'La plupart du temps', },
        had7: { 0: 'Oui, quoi qu\'il arrive', 1: 'Oui, en général', 2: 'Rarement', 3: 'Jamais', },
        had8: { 3: 'Presque toujours', 2: 'Très souvent', 1: 'Parfois', 0: 'Jamais', },
        had9: { 0: 'Jamais ', 1: 'Parfois', 2: 'Assez souvent', 3: 'Très souvent', },
        had10: { 3: 'Plus du tout', 2: 'Je n\'y accorde pas autant d\'attention que je devrais', 1: 'Il se peut que je n\'y fasse plus autant attention', 0: 'J\'y prête autant attention que par le passé', },
        had11: { 3: 'Oui, c\'est tout à fait le cas', 2: 'Un peu', 1: 'Pas tellement', 0: 'Pas du tout ', },
        had12: { 0: 'Autant qu\'avant', 1: 'Un peu moins qu\'avant', 2: 'Bien moins qu\'avant', 3: 'Presque jamais', },
        had13: { 3: 'Vraiment très souvent', 2: 'Assez souvent', 1: 'Pas très souvent', 0: 'Jamais', },
        had14: { 0: 'Souvent', 1: 'Parfois', 2: 'Rarement', 3: 'Très rarement', },
        had15: { 1: 'Oui', 0: 'Non', 99: 'Je ne souhaite pas répondre', },
        aidant: { 1: 'Père/Mère', 2: 'Conjoint(e)', 3: 'Enfant', 4: 'Autre', },
        aidee: { 1: 'Maladie neurologique (ex : Maladie d’Alzheimer, Maladie de Parkinson, AVC …)', 2: 'Maladie psychiatrique', 3: 'Handicap/Incapacité physique', 4: 'Handicap/Incapacité psychique', 5: 'Autre', },
        fam: { 1: 'Célibataire', 2: 'En couple (pacsé(e), marié(e), en concubinage)', 3: 'Séparé(e) ou divorcé(e)', 4: 'Veuf(ve)', },
        soc5: { 4: 'Aucune', 3: '1 à 2', 2: '3 à 5', 1: '6 ou plus', },
        soc6: { 5: 'Non, pas d\'interet du tout', 4: 'Non, peu d\'interet', 3: 'Je ne peux pas dire avec certitude', 2: 'Oui, un certain intérêt', 1: 'Oui, beaucoup d\'intérêt', },
        soc7: { 5: 'Pas du tout ', 4: 'Un peu', 3: 'Modérément', 2: 'Beaucoup', 1: 'Entièrement', },
        diplome: { 6: 'Sans diplôme', 5: 'Certificat de formation générale (CFG), Certificat d\'études primaires, Diplôme national du brevet (BEPC ou Brevet des Collèges)', 4: 'Baccalauréat ou diplôme équivalent', 3: 'Bac +2 ou +3 ou diplôme équivalent', 2: 'Bac +4 ou diplôme équivalent', 1: 'Bac +5 ou plus ou diplôme équivalent', },
        emploi: { 1: 'Vous occupez un emploi, y compris si vous êtes temporairement en arrêt de travail (arrêt maladie, congés sans solde ou disponibilité, congé maternité/paternité/d\'adoption)', 2: 'Vous êtes en recherche d\'emploi', 3: 'Vous êtes retraité(e)', 4: 'Vous êtes en formation', 5: 'Vous ne travaillez pas pour des raisons de santé', 6: 'Vous êtes père/mère au foyer', 7: 'Vous êtes sans activité professionnelle', },
        csp: { 1: 'Agriculteur(trice), exploitant(e) ou conjoint sur l\'exploitation', 2: 'Artisan, commerçant(e), chef d\'entreprise', 3: 'Cadre et profession intellectuelle supérieure (ingénieur, médecin...)', 4: 'Profession intermédiaire (professeur des écoles, infirmier(ère), assistante sociale, technicien(ne), contremaître, agent de maîtrise...)', 5: 'Employé(e) (employé(e) de bureau ou de commerce, garde d\'enfants, agent de service...)', 6: 'Ouvrier(ère)', 7: 'N\'a jamais travaillé', },
        evtvie: { 1: 'Un gain ', 2: 'Une perte', 3: 'Un gain et une perte', 4: 'Ni l\'un ni l\'autre', 5: 'Ne sait pas ', },
        loisirs: { 1: 'J‘ai des activités au sein d’un groupe (association, club, syndicat, parti politique, bénévolat, etc...)', 2: 'J’ai des activités à l’extérieur (cinéma, musée, randonnées, etc...)', 3: 'J’ai des activités à domicile (bricolage, jardinage, etc...)', 4: 'J’ai des activités intellectuelles (mots-fléchés, lecture de livres ou de journaux, etc…)', 5: 'Je n’ai pas d’occupation particulière', 6: 'Vous n’y arrivez plus', },
        retraite2: { 3: 'Vous auriez aimé partir plus tôt', 2: 'Vous auriez aimé partir plus tard', 1: 'C\'était le bon moment', },
        retraite3: { 1: 'Des motifs économiques', 2: 'Votre état de santé', 3: 'Votre âge', 4: 'Un choix de votre part', 5: 'La pression de votre entourage', },
        retraite5: { 1: 'Jamais', 2: 'Rarement', 3: 'Parfois', 4: 'Souvent', },
        retraite6: { 2: 'Un soulagement', 3: 'Un regret', 4: 'Un sentiment d\'inutilité', 5: 'L\'ennui', 6: 'La peur du vide', 1: 'Une opportunité pour faire d\'autres choses', },
        maison: { 1: 'une maison', 2: 'un appartement', },
        aides: { 1: 'CMU (Couverture Maladie Universelle de base)', 2: 'CMUc (CMU complémentaire)', 3: 'AME (Aide Médicale d\'Etat)', 4: 'Autre', },
        chgmt: { 1: 'Alimentation', 2: 'Activité physique', 3: 'Stress / Anxiété', 4: 'Sommeil', 5: 'Mémoire / Attention', 6: 'Alcool', 7: 'Tabac', 8: 'Cannabis', 9: 'Lien social / Activités', },
        ems_auto_eval: { 1: 'Sous-évalué', 2: 'Bien évalué', 3: 'Surévalué', },
        frein_ems: { 0: 'Pas de frein', 1: 'Financier', 2: 'Météo', 3: 'Pratique seule', 4: 'Manque de temps', 5: 'Manque de proximité aux structures', 6: 'Problèmes de santé', 7: 'Manque d\'envie', 'autre': 'Autre(s)', },
        tug: { 1: 'Bonne stabilité', 2: 'Lenteur d\'exécution', 3: 'Hésitation d\'exécution', 4: 'Trébuche à l\'exécution', 5: 'Risque de chute', },
        decision_coaching: { 1: 'Coaching proposé et souhaité', 2: 'Coaching proposé et non souhaité', 3: 'Coaching non proposé mais souhaité', 0: 'Aucun coaching', },
        forme_coaching: { 0: 'Aucune', 1: 'Suivi personnalisé conseillé', 2: 'Sensibilisation collective', },
        assis_cont: { 1: 'Non, pas du tout', 2: 'Non, pas vraiment', 3: 'Oui, plutôt', 4: 'Oui, tout à fait', },
        role_aidant: { 1: '1', 2: '2', 3: '3', 4: '4', 5: '5', },
        ems_objectifs_sante: { 0: 'Garder son autonomie', 1: 'Maintenir sa santé', 2: 'Perdre du poids', 3: 'Limiter les complications liées à une maladie', 4: 'Diminuer des douleurs', 5: 'Rien de particulier', 'autre': 'Autre(s)', },
        ems_objectifs_activite: { 0: 'Maintenir mon activité actuelle', 7: 'Maintenir sa forme', 1: 'Ajouter une activité', 2: 'Reprendre une activité', 3: 'Augmenter le temps d’une de mes activités', 4: 'Organiser ma pratique', 5: 'Bouger de manière adaptée par rapport à une problématique de santé', 6: 'Rien de particulier', 'autre': 'Autre(s)', },
        ems_main_utilisee: { 1: 'Main gauche', 2: 'Main droite', },
        ems_jambe_utilisee: { 1: 'Jambe gauche', 2: 'Jambe droite', },
        ems_activites_physiques: { 0: 'Marche quotidienne', 1: 'Marche promenade', 2: 'Randonnée', 3: 'Randonnée avec dénivelé', 4: 'Marche nordique', 5: 'Golf', 6: 'Natation', 7: 'Aquagym', 8: 'Gymnastique de renforcement', 9: 'Gymnastique de souplesse', 10: 'Salle de gym multi-activité', 11: 'Yoga', 12: 'Tai-Chi', 13: 'Qi Gong', 14: 'Activité professionnelle avec un travail actif', 15: 'Jardinage', 16: 'Bricolage', 17: 'Ménage', 20: 'Pilate', 18: 'Vélo promenade', 19: 'Vélo quotidien', 21: 'Vélo sport', 'autre': 'Autre(s)', },
        ems_tupgo_anomalies: { 0: 'Ne met pas de pied d’appel vers l’avant pour s’aider à se lever', 1: 'Levé de la chaise avec appui au niveau des mains sur les jambes / sur la chaise', },
        diet_modes_alimentaires: { 0: 'Omnivore', 1: 'Flexitarien', 2: 'Végétarien', 3: 'Végétalien et/ou vegan', 4: 'Sans lactose', 5: 'Sans gluten', 'autre': 'Autre(s)', },
        diet_tendances: { 0: 'Restriction cognitive', 1: 'Alimentation émotionnelle', 2: 'Perte de contrôle ou tendance compulsive', 3: 'Perte ou l’absence de plaisir', },
        diet_pret: { 1: 'Rapidement', 2: 'Dans les 6 mois', 0: 'Non', },
        npsy_interp_rt3: { 0: 'Les processus de consolidation sont efficients', 1: 'Perte d’une information en rappel différé traduisant une fragilité des processus de récupération', 2: 'Perte de plusieurs informations en rappel différé traduisant un déficit des processus de consolidation', },
        npsy_interp_rimm: { 0: 'Rappel immédiat préservé', 1: 'Rappel immédiat fragile', 2: 'Rappel immédiat déficitaire', },
        npsy_coop: { 0: 'Bonne coopération', 1: 'Léger manque de coopération', 2: 'Manque de coopération', },
        npsy_comptmt: { 0: 'Adapté', 1: 'Partiellement adapté', 2: 'Présence de jurons', 3: 'Anxiété face à la situation d\'évaluation', },
        npsy_attention: { 0: 'Attention mobilisée et mobilisable', 1: 'Léger manque d’attention', 2: 'Attention fluctuante', 3: 'Difficultés dans le maintien de l’attention', },
        npsy_langage: { 0: 'Langage fluent et discours organisé', 1: 'On retrouve quelques manques du mot', 2: 'Manques du mot et paraphasies', 3: 'Langage peu fluent', },
        npsy_comprehension: { 0: 'Bonne compréhension des consignes', 1: 'Léger manque de compréhension nécessitant des reformulations', },
        raison_non_realise: { 0: 'Contre-Indication Médicale', 1: 'Refus', 2: 'Problème technique', 3: 'Arrêt prématuré / qualité insuffisante', 'autre': 'Autre(s)', },
        dmo_site2: { 0: 'Gauche', 1: 'Droit', },
        npsy_interp_moca: { 0: 'Score au MoCA dans les normes attendues compte tenu de l’âge et du NSC : préservation de l’efficience cognitive globale', 1: 'Score au MoCA dans la limite des normes compte-tenu de l’âge et du NSC ; fragilité de l’efficience cognitive globale', 2: 'Score au MoCA déficitaires compte-tenu de l’âge et du NSC', },
        npsy_interp_3rl: { 0: 'Score aux rappels libres dans les normes attendues; préservation des processus de récupération en mémoire épisodique verbale', 1: 'Score aux rappels libres  dans la limite des normes ; fragilité des processus de récupération en mémoire épisodique verbale', 2: 'Score aux rappels libres déficitaires ; déficit des processus de récupération en mémoire épisodique verbale', },
        npsy_interp_3rt: { 0: 'Score aux rappels totaux dans les normes attendues; préservation des processus de stockage en mémoire épisodique verbale', 1: 'Score aux rappels totaux dans la limite des normes ; fragilité des processus de récupération en mémoire épisodique verbale', 2: 'Score aux rappels totaux déficitaires ; déficit des processus de stockage en mémoire épisodique verbale', },
        npsy_interp_tmta: { 0: 'Temps de réalisation dans les normes attendues  pouvant traduire une préservation des capacités d’attention sélective', 1: 'Temps de réalisation dans la limite des normes pouvant traduire une fragilité des capacités d’attention sélective', 2: 'Temps de réalisation déficitaire pouvant traduire un déficit des capacités d’attention sélective', },
        npsy_interp_deno: { 0: 'Temps de réalisation en dénomination dans les normes attendues  pas de ralentissement dans une épreuve de dénomination de couleur', 1: 'Temps de réalisation dans la limite des normes pouvant traduire un léger ralentissement dans une tâche de dénomination de couleur', 2: 'Temps de réalisation déficitaire pouvant traduire un ralentissement dans une tâche de dénomination de couleur', },
        score_lecture_interp: { 0: 'Temps de réalisation en lecture dans les normes attendues  pas de ralentissement dans cette épreuve de lecture', 1: 'Temps de réalisation dans la limite des normes pouvant traduire un léger ralentissement dans une tâche de lecture', 2: 'Temps de réalisation déficitaire pouvant traduire un ralentissement dans une tâche de lecture', },
        npsy_interp_code: { 0: 'Performance dans les normes, pas de ralentissement du traitement de l’information dans une épreuve impliquant la rapidité grapho-motrice et le balayage visuel', 1: 'Performances dans la limite des normes pouvant traduire un léger ralentissement du traitement de l’information dans une épreuve impliquant la rapidité grapho-motrice et le balayage visuel', 2: 'Performances déficitaires  traduisant un ralentissement du traitement de l’information dans une épreuve impliquant la rapidité grapho-motrice et le balayage visuel', },
        npsy_interp_tmtb: { 0: 'Temps de réalisation dans les normes attendues pouvant traduire une préservation des capacités de flexibilité mental', 1: 'Temps de réalisation dans la limite des normes pouvant traduire une fragilité des capacités de flexibilité mentale', 2: 'Temps de réalisation déficitaire pouvant traduire un déficit des capacités de flexibilité mentale', },
        npsy_interp_interf: { 0: 'Performance dans les normes attendues (temps) pas de ralentissement dans une épreuve impliquant l’inhibition d’une réponse automatique (lecture) au profit d’une autre (dénomination de couleur)', 1: 'Performances dans la limite des normes attendues (temps) pouvant traduire un léger ralentissement dans une épreuve impliquant l’inhibition d’une réponse automatique (lecture) au profit d’une autre (dénomination de couleur)', 2: 'Temps de réalisation déficitaire pouvant traduire un ralentissement dans une épreuve impliquant l’inhibition d’une réponse automatique (lecture) au profit d’une autre (dénomination de couleur)', },
        npsy_interp_flu1: { 0: 'Performance dans les normes attendues, préservation des capacités de fluences verbales sémantiques', 1: 'Performances dans la limite des normes attendues, fragilité des capacités de fluences verbales sémantiques', 2: 'Performances déficitaires, déficit des capacités de fluences verbales sémantiques', },
        npsy_interp_flu2: { 0: 'Performance dans les normes attendues, préservation des capacités de fluences verbales phonémiques', 1: 'Performances dans la limite des normes attendues, fragilité des capacités de fluences verbales phonémiques', 2: 'Performances déficitaires, déficit des capacités de fluences verbales phonémiques', },
        activiteqv: { 1: 'Je n\'ai aucun problème pour accomplir mes activités courantes', 2: 'J\'ai des problèmes pour accomplir mes activités courantes', 3: 'Je suis incapable d\'accomplir mes activités courantes', },
        ems_intensite: { 1: 'Faible', 2: 'Modérée', 3: 'Intense', },
        npsy_interp_seqlc: { 0: 'Score dans les normes attendues, préservation de la mémoire de travail auditivo-verbale', 1: 'Score dans la limite des normes ""Fragilité"" de la mémoire de travail auditivo-verbale', 2: 'Score déficitaire traduisant un déficit de la mémoire de travail auditivo-verbale', },
        statut_rdv: { 1: 'Attendu', 2: 'Parti avant la fin', 3: 'Présent', 4: 'Venu', 5: 'Non venu', 6: 'En attente de confirmatio', },
        raison_non_realise_vision: { 0: 'Contre-Indication Médicale', 1: 'Refus', 2: 'Problème technique', 3: 'Arrêt prématuré', 4: 'Lunettes oubliées', 5: 'Cécité ou prothèse', 'autre': 'Autre(s)', },
        raison_non_realise_audition: { 0: 'Contre-Indication Médicale', 1: 'Refus', 2: 'Problème technique', 3: 'Arrêt prématuré', 4: 'Appareillage', 'autre': 'Autre(s)', },
        sitedmo: { 'rachis': 'Rachis', 'hanche': 'Hanche', 'avbras': 'Avant-bras', 'corps': 'Corps entier', 'aucun': 'Aucun', },
        diet_0a3: { 0: '0', 1: '1', 2: '2', 3: '3', },
        d8ixe771: { 1: 'Goût des aliments', 2: 'Convivialité, ambiance', 3: 'Cadre des repas', 4: 'Besoin de réconfort, de compenser', 5: 'Autre(s)', },
        gk23ykiw: { 1: 'Solitude', 2: 'Manque de temps', 3: 'Monotonie des repas', 4: 'Etat psychologique (émotions négatives)', 5: 'Autre(s)', },
        diet_types_grignotage: { 1: 'Sucré', 2: 'Gras sucré', 3: 'Gras salé', 4: 'Mixte', },
        diet_preparation: { 0: 'Jamais', 1: 'Peu', 2: 'Fréquent', 3: 'Le plus souvent', },
        diet_apports: { 0: 'Insuffisants', 1: 'Suffisants', },
        retino3: { 0: 'Hémorragies rétiniennes', 1: 'Nodule rétinien', 2: 'Dépôts maculaires (drusen)', 3: 'Membrane épirétinienne', 4: 'Signe du croisement', 5: 'Anomalie de la papille', 6: 'Examen normal', 7: 'Autre(s) anomalie(s)', },
        ems_timeup_equilibre: { 0: 'Déséquilibre dynamique légèrement anormal', 1: 'Déséquilibre dynamique moyennement anormal', 2: 'Déséquilibre dynamique anormal', 3: 'Déséquilibre dynamique très anormal', },
        ems_getup: { 1: 'Aucune instabilité', 2: 'Très légèrement anormal (lenteur à l’exécution de la consigne)', 3: 'Moyennement anormal ((hésitation, mouvement compensateur des membres supérieurs et du tronc)', 4: 'Anormal (le consultant trébuche)', 5: 'Très anormal (risque permanent de chute)', },
        ems_reco_osteo1: { 1: 'La personne effectue déjà ce qu’il faut', 2: 'Renforcement musculaire progressif des membres inférieurs avec ou sans port de poids', 3: 'Marche régulière (30min par jour) et conseiller l’auto-évaluation par l’utilisation d’un podomètre (7100 pas : actif)', 4: 'Renforcement musculaire progressif des membres inférieurs avec ou sans port de poids ; marche régulière (30min par jour) et conseiller l’auto-évaluation par l’utilisation d’un podomètre (7100 pas : actif)', 'autre': 'Autre(s)', },
        ems_reco_sarco: { 4: 'La personne effectue déjà ce qu’il faut', 1: 'Renforcement musculaire progressif', 2: 'Travail d’endurance (20 à 40min continu, 4x/sem)', 3: 'Renforcement musculaire progressif et travail d’endurance (20 à 40min continu, 4x/sem)', 'autre': 'Autre(s)', },
        ems_reco_osteo2: { 1: 'La personne effectue déjà ce qu’il faut', 2: 'Marche régulière (30min par jour) et conseiller l’auto-évaluation par l’utilisation d’un podomètre (7100 pas : actif)', 3: 'Renforcement musculaire progressif des dorsaux', 4: 'Renforcement musculaire progressif des dorsaux ; marche régulière (30min par jour) et conseiller l’auto-évaluation par l’utilisation d’un podomètre (7100 pas : actif)', 'autre': 'Autre(s)', },
        ems_reco_autres: { 0: 'Echauffement', 1: 'Etirement', 2: 'Equilibre statique', 3: 'Equilibre dynamique', 'autre': 'Complémentaire(s)', },
        ems_orientation_ext: { 1: 'Activité autonome', 2: 'Association ou club de remise en forme', 3: 'Avis spécialisé : Kinésithérapeute OU Enseignant APA (équilibre)', 4: 'Avis spécialisé : Kinésithérapeute OU Enseignant APA (renforcement musculaire)', 5: 'Avis spécialisé : Kinésithérapeute OU Enseignant APA (équilibre et renforcement musculaire)', 6: 'Avis spécialisé : Rhumatologue', 7: 'Avis spécialisé : Rhumatologue et Kinésithérapeute OU Enseignant APA (équilibre)', 8: 'Avis spécialisé : Rhumatologue et Kinésithérapeute OU Enseignant APA (renforcement musculaire)', 9: 'Avis spécialisé : Rhumatologue et Kinésithérapeute OU Enseignant APA (équilibre et renforcement musculaire)', },
        comp_ali_inadapt: { 0: 'Ponctuels', 1: 'Installés et/ou sévères et/ou connus', },
        ecg_rythme: { 1: 'Rythme sinusal', 2: 'Arythmie sinusale', 3: 'Tachycardie sinusale', 4: 'Bradycardie sinusale', 5: 'Rythme sinus coronaire', 6: 'Rythme auriculaire ectopique', 7: 'Wandering pacemaker', 8: 'Fibrillation auriculaire (AC/FA)', 9: 'Flutter auriculaire', 10: 'Tachycardie atriale', 11: 'Tachycardie jonctionnelle', 12: 'Rythme jonctionnel', 13: 'Echappement jonctionnel', 14: 'Echappement ventriculaire', 15: 'Rythme ventriculaire anormal', 16: 'Pacemaker', },
        ecg_extrasystole: { 1: 'Rares extrasystoles supra-ventriculaires (ESSV)', 2: 'Nombreuses extrasystoles supra-ventriculaires', 3: 'Salve d\'extrasystoles supra-ventriculaires', 4: 'Extrasystoles ventriculaires simples (ESV)', 5: 'Extrasystoles ventriculaires polymorphes', 6: 'Extrasystoles ventriculaires bigéminées', 7: 'Extrasystoles ventriculaires trigéminées', 8: 'Nombreuses extrasystoles ventriculaires', 9: 'Salve d\'extrasystoles ventriculaires', },
        ecg_conduction: { 1: 'Bloc inter-auriculaire', 2: 'Bloc sino-auriculaire (BSA)', 3: 'BAV du premier degré', 4: 'BAV du deuxième degré (type Luciani-Wenckebach)', 5: 'BAV du deuxième degré (type Mobitz 2)', 6: 'BAV du troisième degré', 7: 'Syndrome de WOLF-PARKINSON-WHITE', 8: 'Syndrome du PR court isolé', 9: 'Syndrome de MAHAIM', 10: 'Bloc de branche droit incomplet de type mineur', 11: 'Bloc de branche droit incomplet', 12: 'Bloc de branche droit complet', 13: 'Bloc de branche gauche incomplet', 14: 'Bloc de branche gauche complet', 15: 'HBAG', 16: 'HBPG', 17: 'Trouble conductif non spécifique', },
        ecg_qrs: { 1: 'Microvoltage', 2: 'Déviation axiale droite', 3: 'Déviation axiale gauche', 4: 'Aspect S1Q3', 5: 'Aspect S1S2S3', 6: 'Situs inversus', },
        ecg_surcharge: { 1: 'Hypertrophie auriculaire droite possible', 2: 'Hypertrophie auriculaire gauche possible', 3: 'HVD sans trouble de la repolarisation', 4: 'HVD avec trouble de la repolarisation', 5: 'HVG sans trouble de la repolarisation', 6: 'HVG avec trouble de la repolarisation', 7: 'HVG cœur sportif probable', 8: 'Possible surcharge systolique du VG', },
        ecg_aspect_necrose: { 1: 'Nécrose', 2: 'Nécrose possible', 3: 'Nécrose récente', 4: 'Nécrose ancienne', },
        ecg_localisation_necrose: { 1: 'de siège antéro-septal', 2: 'de siège apical', 3: 'de siège antéro-septo-apical', 4: 'de siège latéral', 5: 'de siège antérieur étendu', 6: 'de siège inférieur', 7: 'de siège postéro-latéral', 8: 'de siège septal profond (ou septal massif)', },
        ecg_repolarisation: { 1: 'repolarisation normale', 2: 'trouble non spécifique de la repolarisation', 3: 'sus-décalage non ischémique de ST', 4: 'sous- décalage non ischémique de ST', 5: 'atypies diffuses de la repolarisation', 6: 'onde Q atypique', 7: 'atypie du segment ST', 8: 'atypie de l\'onde T', 9: 'onde T ample', 10: 'onde T aplatie', 11: 'onde T bifide', 12: 'onde U marquée', 13: 'allongement du QT', 14: 'raccourcissement QT', },
        ecg_lesion_epi: { 1: 'de siège antéro-septal', 2: 'de siège apical', 3: 'de siège antéro-septo-apical', 4: 'de siège latéral', 5: 'de siège antérieur étendu', 6: 'de siège inférieur', 7: 'de siège postéro-latéral', 8: 'de siège septal profond (ou septal massif)', },
        ecg_lesion_endo: { 1: 'de siège antéro-septal', 2: 'de siège apical', 3: 'de siège antéro-septo-apical', 4: 'de siège latéral', 5: 'de siège antérieur étendu', 6: 'de siège inférieur', 7: 'de siège postéro-latéral', 8: 'de siège septal profond (ou septal massif)', },
        ecg_ischemie_epi: { 1: 'de siège antéro-septal', 2: 'de siège apical', 3: 'de siège antéro-septo-apical', 4: 'de siège latéral', 5: 'de siège antérieur étendu', 6: 'de siège inférieur', 7: 'de siège postéro-latéral', 8: 'de siège septal profond (ou septal massif)', },
        ecg_ischemie_endo: { 1: 'de siège antéro-septal', 2: 'de siège apical', 3: 'de siège antéro-septo-apical', 4: 'de siège latéral', 5: 'de siège antérieur étendu', 6: 'de siège inférieur', 7: 'de siège postéro-latéral', 8: 'de siège septal profond (ou septal massif)', },
        ecg_anterieur: { 1: 'ECG comparable avec le tracé précédent', 2: 'ECG non significativement différent du précédent', 3: 'ECG modifié par rapport au tracé précédent', 4: 'ECG aggravé par rapport au tracé précédent', 5: 'ECG à comparer avec un tracé antérieur', 6: 'Pas d\'ECG antérieur pour pouvoir comparer', },
        ecg_conclusion: { 1: 'Tracé ininterprétable', 2: 'Tracé normal', 3: 'Tracé sensiblement normal', 4: 'Anomalies mineures', 5: 'Atypies de l\'ECG', 6: 'Troubles mineurs, mais avis cardiologique souhaité', 7: 'Tracé pathologique', 8: 'Tracé pathologique à explorer', 9: 'Tracé pathologique connu', 10: 'Trouble de la repolarisation isolé, avis cardio conseillé', },
        npsy_nsc: { 1: 'Niveau 1 : Inférieur au bac (bac non obtenu)', 2: 'Niveau 2 : BAC obtenu ou diplômes équivalents mais pas d\'études supérieures', 3: 'Niveau 3 : Etudes supérieures', },
        ems_freq: { 0: 'Irrégulier', 1: '1x/sem', 2: '2x/sem', 3: '3x/sem', 4: '4x/sem', 5: '5x/sem', 6: '6x/sem', 7: 'Tous les jours', },
        ems_temps: { 0: '15 min', 1: '30 min', 2: '45 min', 3: '1h', 4: '1h30', 5: '2h', 6: '3h et +', },
        ems_dispo_journees: { 1: 'Lundi', 2: 'Mardi', 3: 'Mercredi', 4: 'Jeudi', 5: 'Vendredi', 6: 'Samedi', 7: 'Dimanche', },
        ems_motivation: { 1: 'Motivé et disponible', 2: 'Motivé mais indisponible', 3: 'Non motivé mais disponible', 4: 'Non motivé et non disponible', },
        npsy_interp_pasat: { 1: 'Dans les normes', 2: 'Limite', 3: 'Anormal', },
        oui_non_indecis: { 1: 'Oui', 2: 'Indécis', 0: 'Non', },
        ems_non_dispo: { 0: 'Trop loin', 1: 'Pas envie', 2: 'Pas le temps', 3: 'Aidant', 'autre': 'Autre(s)', },
        rdv_financeur_pl: { 1: 'ARS', 2: 'CARSAT', },
        rdv_entreprise_balc: { 1: 'Entreprise 1', 2: 'Entreprise 2', },
        statut_aq: { 1: 'envoyé', 2: 'réceptionné par l\'ipl', 3: 'papier retard', 4: 'incomplet', 5: 'complet', },
        financeur: { 0: 'AG2R', 1: 'ARS', 2: 'Entreprise', 3: 'Autre(s)', },
        ecg_delai_consultation: { 1: 'Urgent < 1 semaine', 2: 'Rapide < 3 mois', 3: 'Sans urgence', 4: 'Pas de consultation recommandée', },
    };

    const VarInfo = {
        neuropsy_evaluateur: { kind: 'text' },
        neuropsy_nsc: { kind: 'enum', dict_name: 'npsy_nsc' },
        neuropsy_npsy_adapt_geria12: { kind: 'enum', dict_name: 'oui_non' },
        neuropsy_npsy_adapt_victoria: { kind: 'enum', dict_name: 'oui_non' },
        neuropsy_npsy_adapt_pasat: { kind: 'enum', dict_name: 'oui_non' },
        neuropsy_quali_coop: { kind: 'enum', dict_name: 'npsy_coop' },
        neuropsy_quali_comptmt: { kind: 'enum', dict_name: 'npsy_comptmt' },
        neuropsy_quali_attention: { kind: 'enum', dict_name: 'npsy_attention' },
        neuropsy_quali_langage: { kind: 'enum', dict_name: 'npsy_langage' },
        neuropsy_quali_comprehension: { kind: 'enum', dict_name: 'npsy_comprehension' },
        neuropsy_frein_oui_non: { kind: 'enum', dict_name: 'oui_non' },
        neuropsy_freins: { kind: 'multi', dict_name: 'npsy_comprehension_frein' },
        neuropsy_quali_comm: { kind: 'text' },
        neuropsy_plainte_cog: { kind: 'enum', dict_name: 'oui_non' },
        neuropsy_plainte_cog_inquietude: { kind: 'enum', dict_name: 'oui_non' },
        neuropsy_plainte_cog_details: { kind: 'text' },
        neuropsy_plainte_thym: { kind: 'enum', dict_name: 'oui_non' },
        neuropsy_plainte_thym_details: { kind: 'text' },
        neuropsy_plainte_anx: { kind: 'enum', dict_name: 'oui_non' },
        neuropsy_plainte_anx_details: { kind: 'text' },
        neuropsy_plainte_som: { kind: 'enum', dict_name: 'oui_non' },
        neuropsy_plainte_som_details: { kind: 'text' },
        neuropsy_score_moca: { kind: 'float' },
        neuropsy_moca_c50: { kind: 'enum', dict_name: 'oui_non' },
        neuropsy_moca_c5: { kind: 'enum', dict_name: 'oui_non' },
        neuropsy_score_moca_z: { kind: 'float' },
        neuropsy_moca_interp: { kind: 'enum', dict_name: 'npsy_interp_moca' },
        neuropsy_moca_comm: { kind: 'text' },
        neuropsy_score_rimm1: { kind: 'integer' },
        neuropsy_score_rimm2: { kind: 'integer' },
        neuropsy_score_rimm_interp: { kind: 'enum', dict_name: 'npsy_interp_rimm' },
        neuropsy_score_3rl: { kind: 'integer' },
        neuropsy_score_2rl: { kind: 'integer' },
        neuropsy_rl_c50: { kind: 'enum', dict_name: 'oui_non' },
        neuropsy_rl_c5: { kind: 'enum', dict_name: 'oui_non' },
        neuropsy_score_3rl_z: { kind: 'float' },
        neuropsy_score_2rl_z: { kind: 'float' },
        neuropsy_score_3rl_interp: { kind: 'enum', dict_name: 'npsy_interp_3rl' },
        neuropsy_score_3rt: { kind: 'integer' },
        neuropsy_score_2rt: { kind: 'integer' },
        neuropsy_rt_c50: { kind: 'enum', dict_name: 'oui_non' },
        neuropsy_rt_c5: { kind: 'enum', dict_name: 'oui_non' },
        neuropsy_score_3rt_z: { kind: 'float' },
        neuropsy_score_2rt_z: { kind: 'float' },
        neuropsy_score_3rt_interp: { kind: 'enum', dict_name: 'npsy_interp_3rt' },
        neuropsy_score_rt3: { kind: 'integer' },
        neuropsy_score_rt2: { kind: 'integer' },
        neuropsy_score_rtdiff: { kind: 'integer' },
        neuropsy_score_rt3_interp: { kind: 'enum', dict_name: 'npsy_interp_rt3' },
        neuropsy_episod_comm: { kind: 'text' },
        neuropsy_score_tmta_temps: { kind: 'integer' },
        neuropsy_score_tmta_erreurs: { kind: 'integer' },
        neuropsy_tmta_c50: { kind: 'enum', dict_name: 'oui_non' },
        neuropsy_tmta_c5: { kind: 'enum', dict_name: 'oui_non' },
        neuropsy_score_tmta_z: { kind: 'float' },
        neuropsy_score_tmta_interp: { kind: 'enum', dict_name: 'npsy_interp_tmta' },
        neuropsy_tmta_comm: { kind: 'text' },
        neuropsy_score_deno_temps: { kind: 'integer' },
        neuropsy_score_deno_erreurs: { kind: 'integer' },
        neuropsy_deno_c50: { kind: 'enum', dict_name: 'oui_non' },
        neuropsy_deno_c5: { kind: 'enum', dict_name: 'oui_non' },
        neuropsy_score_deno_z: { kind: 'float' },
        neuropsy_score_deno_interp: { kind: 'enum', dict_name: 'npsy_interp_deno' },
        neuropsy_deno_comm: { kind: 'text' },
        neuropsy_score_lecture_temps: { kind: 'integer' },
        neuropsy_score_lecture_erreurs: { kind: 'integer' },
        neuropsy_lecture_c50: { kind: 'enum', dict_name: 'oui_non' },
        neuropsy_lecture_c5: { kind: 'enum', dict_name: 'oui_non' },
        neuropsy_score_lecture_z: { kind: 'float' },
        neuropsy_score_lecture_interp: { kind: 'enum', dict_name: 'score_lecture_interp' },
        neuropsy_lecture_comm: { kind: 'text' },
        neuropsy_score_code_corrects: { kind: 'integer' },
        neuropsy_score_code_erreurs1: { kind: 'integer' },
        neuropsy_score_code_erreurs2: { kind: 'integer' },
        neuropsy_score_code_omissions: { kind: 'integer' },
        neuropsy_code_std: { kind: 'integer' },
        neuropsy_code_c50: { kind: 'enum', dict_name: 'oui_non' },
        neuropsy_code_c5: { kind: 'enum', dict_name: 'oui_non' },
        neuropsy_score_code_z: { kind: 'float' },
        neuropsy_score_code_interp: { kind: 'enum', dict_name: 'npsy_interp_code' },
        neuropsy_code_comm: { kind: 'text' },
        neuropsy_score_tmtb_temps: { kind: 'integer' },
        neuropsy_score_tmtb_erreurs: { kind: 'integer' },
        neuropsy_tmtb_c50: { kind: 'enum', dict_name: 'oui_non' },
        neuropsy_tmtb_c5: { kind: 'enum', dict_name: 'oui_non' },
        neuropsy_score_tmtb_z: { kind: 'float' },
        neuropsy_score_tmtb_interp: { kind: 'enum', dict_name: 'npsy_interp_tmtb' },
        neuropsy_tmtb_comm: { kind: 'text' },
        neuropsy_score_interf_temps1: { kind: 'integer' },
        neuropsy_score_interf_temps2: { kind: 'integer' },
        neuropsy_score_interf_erreurs1: { kind: 'integer' },
        neuropsy_score_interf_erreurs2: { kind: 'integer' },
        neuropsy_interf_c50: { kind: 'enum', dict_name: 'oui_non' },
        neuropsy_interf_c5: { kind: 'enum', dict_name: 'oui_non' },
        neuropsy_score_interf_z: { kind: 'float' },
        neuropsy_score_interf_interp: { kind: 'enum', dict_name: 'npsy_interp_interf' },
        neuropsy_interf_comm: { kind: 'text' },
        neuropsy_seqlc_score_brut: { kind: 'integer' },
        neuropsy_seqlc_std: { kind: 'integer' },
        neuropsy_seqlc_c50: { kind: 'enum', dict_name: 'oui_non' },
        neuropsy_seqlc_c5: { kind: 'enum', dict_name: 'oui_non' },
        neuropsy_seqlc_score_z: { kind: 'float' },
        neuropsy_seqlc_interp: { kind: 'enum', dict_name: 'npsy_interp_seqlc' },
        neuropsy_seqlc_comm: { kind: 'text' },
        neuropsy_pasat_score_brut: { kind: 'integer' },
        neuropsy_pasat_score_cent: { kind: 'integer' },
        neuropsy_pasat_score_z: { kind: 'float' },
        neuropsy_pasat_erreurs_telescop: { kind: 'integer' },
        neuropsy_pasat_erreurs_non_reponses: { kind: 'integer' },
        neuropsy_pasat_erreurs_calcul: { kind: 'integer' },
        neuropsy_pasat_non_reponses: { kind: 'integer' },
        neuropsy_pasat_interp: { kind: 'enum', dict_name: 'npsy_interp_pasat' },
        neuropsy_pasat_comm: { kind: 'text' },
        neuropsy_score_flu1_correct: { kind: 'integer' },
        neuropsy_score_flu1_erreurs: { kind: 'integer' },
        neuropsy_score_flu1_repet: { kind: 'integer' },
        neuropsy_flu1_c50: { kind: 'enum', dict_name: 'oui_non' },
        neuropsy_flu1_c5: { kind: 'enum', dict_name: 'oui_non' },
        neuropsy_score_flu1_z: { kind: 'float' },
        neuropsy_score_flu1_interp: { kind: 'enum', dict_name: 'npsy_interp_flu1' },
        neuropsy_flu1_comm: { kind: 'text' },
        neuropsy_score_flu2_correct: { kind: 'integer' },
        neuropsy_score_flu2_erreurs: { kind: 'integer' },
        neuropsy_score_flu2_repet: { kind: 'integer' },
        neuropsy_flu2_c50: { kind: 'enum', dict_name: 'oui_non' },
        neuropsy_flu2_c5: { kind: 'enum', dict_name: 'oui_non' },
        neuropsy_score_flu2_z: { kind: 'float' },
        neuropsy_score_flu2_interp: { kind: 'enum', dict_name: 'npsy_interp_flu2' },
        neuropsy_flu2_comm: { kind: 'text' },
        neuropsy_synthese: { kind: 'text' },
        neuropsy_objectifs: { kind: 'text' },
        neuropsy_proposition_coaching: { kind: 'enum', dict_name: 'decision_coaching' },
        neuropsy_forme_coaching: { kind: 'enum', dict_name: 'forme_coaching' },
        aq1_prev1: { kind: 'enum', dict_name: 'oui_non_plus' },
        aq1_prev2: { kind: 'enum', dict_name: 'oui_non_na' },
        aq1_prev3: { kind: 'enum', dict_name: 'oui_non_na' },
        aq1_prev4: { kind: 'enum', dict_name: 'oui_non_na' },
        aq1_prev5: { kind: 'enum', dict_name: 'freq1' },
        aq1_prev6: { kind: 'enum', dict_name: 'freq2' },
        aq1_prev7: { kind: 'enum', dict_name: 'oui_non_nsp' },
        aq1_prev8: { kind: 'enum', dict_name: 'oui_non' },
        aq1_prev9: { kind: 'enum', dict_name: 'oui_non' },
        aq1_prev11: { kind: 'enum', dict_name: 'oui_non' },
        aq1_prev10: { kind: 'enum', dict_name: 'oui_non' },
        aq1_alim1: { kind: 'enum', dict_name: 'freqjour1' },
        aq1_alim2: { kind: 'enum', dict_name: 'oui_non' },
        aq1_alim3: { kind: 'enum', dict_name: 'freqjour2' },
        aq1_alim4: { kind: 'enum', dict_name: 'oui_non' },
        aq1_alim5: { kind: 'enum', dict_name: 'portion_jour' },
        aq1_alim6: { kind: 'enum', dict_name: 'freqjour3' },
        aq1_alim7: { kind: 'enum', dict_name: 'freqjour1' },
        aq1_alim8: { kind: 'enum', dict_name: 'freqjour1' },
        aq1_alim9: { kind: 'enum', dict_name: 'freqjour4' },
        aq1_alim10: { kind: 'enum', dict_name: 'freqjour5' },
        aq1_alim11: { kind: 'enum', dict_name: 'freqjour4' },
        aq1_alim12: { kind: 'enum', dict_name: 'beurre' },
        aq1_alim13: { kind: 'enum', dict_name: 'freqjour4' },
        aq1_alim14: { kind: 'enum', dict_name: 'oui_non' },
        aq1_alim15: { kind: 'enum', dict_name: 'habit_alim' },
        aq1_activ1: { kind: 'enum', dict_name: 'freqsem1' },
        aq1_activ2: { kind: 'enum', dict_name: 'freqsem2' },
        aq1_activ3: { kind: 'enum', dict_name: 'assis' },
        aq1_activ4: { kind: 'enum', dict_name: 'assis_cont' },
        aq1_alcool1: { kind: 'enum', dict_name: 'oui_non' },
        aq1_alcool2: { kind: 'enum', dict_name: 'oui_non' },
        aq1_alcool3c: { kind: 'integer' },
        aq1_alcool3b: { kind: 'integer' },
        aq1_alcool3a: { kind: 'integer' },
        aq1_alcool4: { kind: 'enum', dict_name: 'freqmois1' },
        aq1_alcool5: { kind: 'enum', dict_name: 'verres' },
        aq1_alcool6: { kind: 'enum', dict_name: 'freqmois2' },
        aq1_alcool7: { kind: 'enum', dict_name: 'freqmois2' },
        aq1_alcool8: { kind: 'enum', dict_name: 'freqmois2' },
        aq1_alcool9: { kind: 'enum', dict_name: 'freqmois2' },
        aq1_alcool10: { kind: 'enum', dict_name: 'freqmois2' },
        aq1_alcool11: { kind: 'enum', dict_name: 'freqmois2' },
        aq1_alcool12: { kind: 'enum', dict_name: 'blesse_alcool' },
        aq1_alcool13: { kind: 'enum', dict_name: 'blesse_alcool' },
        aq1_tabac1: { kind: 'enum', dict_name: 'oui_non' },
        aq1_tabac2: { kind: 'enum', dict_name: 'oui_non' },
        aq1_tabac3: { kind: 'enum', dict_name: 'oui_reg_non' },
        aq1_tabac4: { kind: 'enum', dict_name: 'oui_non' },
        aq1_tabac5: { kind: 'enum', dict_name: 'cigar_elec' },
        aq1_tabac6: { kind: 'integer' },
        aq1_tabac7: { kind: 'enum', dict_name: 'nb_cigar' },
        aq1_tabac8: { kind: 'enum', dict_name: 'delai_cigar' },
        aq1_tabac9: { kind: 'enum', dict_name: 'oui_non' },
        aq1_drog1: { kind: 'enum', dict_name: 'oui_non' },
        aq1_risq1: { kind: 'enum', dict_name: 'oui_non' },
        aq1_risq2: { kind: 'enum', dict_name: 'oui_non' },
        aq1_risq3: { kind: 'enum', dict_name: 'oui_non' },
        aq1_som1: { kind: 'multi', dict_name: 'trouble_sommeil' },
        aq1_som2: { kind: 'enum', dict_name: 'oui_non' },
        aq1_som3: { kind: 'multi', dict_name: 'trouble_diurne' },
        aq1_som4: { kind: 'enum', dict_name: 'oui_non' },
        aq1_som5: { kind: 'enum', dict_name: 'oui_non' },
        aq1_strav1: { kind: 'enum', dict_name: 'oui_non' },
        aq1_strav2: { kind: 'enum', dict_name: 'temps_travail' },
        aq1_strav3: { kind: 'enum', dict_name: 'heures_travail' },
        aq1_strav4: { kind: 'enum', dict_name: 'oui_non' },
        aq1_strav5: { kind: 'enum', dict_name: 'oui_non' },
        aq1_strav6: { kind: 'enum', dict_name: 'oui_non' },
        aq1_strav7: { kind: 'enum', dict_name: 'oui_non' },
        aq1_eq5d1: { kind: 'enum', dict_name: 'mobilite' },
        aq1_eq5d2: { kind: 'enum', dict_name: 'autonomie' },
        aq1_eq5d3: { kind: 'enum', dict_name: 'activiteqv' },
        aq1_eq5d4: { kind: 'enum', dict_name: 'douleurs' },
        aq1_eq5d5: { kind: 'enum', dict_name: 'anxiete' },
        aq1_eq5d6: { kind: 'integer' },
        aq1_had1: { kind: 'enum', dict_name: 'had1' },
        aq1_had2: { kind: 'enum', dict_name: 'had2' },
        aq1_had3: { kind: 'enum', dict_name: 'had3' },
        aq1_had4: { kind: 'enum', dict_name: 'had4' },
        aq1_had5: { kind: 'enum', dict_name: 'had5' },
        aq1_had6: { kind: 'enum', dict_name: 'had6' },
        aq1_had7: { kind: 'enum', dict_name: 'had7' },
        aq1_had8: { kind: 'enum', dict_name: 'had8' },
        aq1_had9: { kind: 'enum', dict_name: 'had9' },
        aq1_had10: { kind: 'enum', dict_name: 'had10' },
        aq1_had11: { kind: 'enum', dict_name: 'had11' },
        aq1_had12: { kind: 'enum', dict_name: 'had12' },
        aq1_had13: { kind: 'enum', dict_name: 'had13' },
        aq1_had14: { kind: 'enum', dict_name: 'had14' },
        aq1_had15: { kind: 'enum', dict_name: 'had15' },
        aq1_cra: { kind: 'enum', dict_name: 'oui_non' },
        aq1_cra1: { kind: 'enum', dict_name: 'aidant' },
        aq1_cra2: { kind: 'multi', dict_name: 'aidee' },
        aq1_cra3a: { kind: 'enum', dict_name: 'role_aidant' },
        aq1_cra3b: { kind: 'enum', dict_name: 'role_aidant' },
        aq1_cra3c: { kind: 'enum', dict_name: 'role_aidant' },
        aq1_cra3d: { kind: 'enum', dict_name: 'role_aidant' },
        aq1_cra3e: { kind: 'enum', dict_name: 'role_aidant' },
        aq1_cra3f: { kind: 'enum', dict_name: 'role_aidant' },
        aq1_cra3g: { kind: 'enum', dict_name: 'role_aidant' },
        aq1_cra3h: { kind: 'enum', dict_name: 'role_aidant' },
        aq1_cra3i: { kind: 'enum', dict_name: 'role_aidant' },
        aq1_cra3j: { kind: 'enum', dict_name: 'role_aidant' },
        aq1_cra3k: { kind: 'enum', dict_name: 'role_aidant' },
        aq1_cra3l: { kind: 'enum', dict_name: 'role_aidant' },
        aq1_cra3m: { kind: 'enum', dict_name: 'role_aidant' },
        aq1_cra3n: { kind: 'enum', dict_name: 'role_aidant' },
        aq1_cra3o: { kind: 'enum', dict_name: 'role_aidant' },
        aq1_cra3p: { kind: 'enum', dict_name: 'role_aidant' },
        aq1_cra3q: { kind: 'enum', dict_name: 'role_aidant' },
        aq1_cra3r: { kind: 'enum', dict_name: 'role_aidant' },
        aq1_cra3s: { kind: 'enum', dict_name: 'role_aidant' },
        aq1_cra3t: { kind: 'enum', dict_name: 'role_aidant' },
        aq1_cra3u: { kind: 'enum', dict_name: 'role_aidant' },
        aq1_cra3v: { kind: 'enum', dict_name: 'role_aidant' },
        aq1_cra3w: { kind: 'enum', dict_name: 'role_aidant' },
        aq1_cra3x: { kind: 'enum', dict_name: 'role_aidant' },
        aq1_sitfam1: { kind: 'enum', dict_name: 'fam' },
        aq1_sitfam2: { kind: 'enum', dict_name: 'oui_non' },
        aq1_integsoc1: { kind: 'enum', dict_name: 'oui_non' },
        aq1_integsoc2: { kind: 'enum', dict_name: 'oui_non' },
        aq1_integsoc3: { kind: 'enum', dict_name: 'oui_non' },
        aq1_integsoc4: { kind: 'enum', dict_name: 'oui_non' },
        aq1_integsoc5: { kind: 'enum', dict_name: 'soc5' },
        aq1_integsoc6: { kind: 'enum', dict_name: 'soc6' },
        aq1_integsoc7: { kind: 'enum', dict_name: 'soc7' },
        aq1_integsoc8: { kind: 'enum', dict_name: 'oui_non' },
        aq1_trav1: { kind: 'enum', dict_name: 'diplome' },
        aq1_trav2: { kind: 'enum', dict_name: 'emploi' },
        aq1_trav3: { kind: 'enum', dict_name: 'csp' },
        aq1_trav4: { kind: 'text' },
        aq1_evtvie1: { kind: 'enum', dict_name: 'oui_non' },
        aq1_evtvie2: { kind: 'text' },
        aq1_evtvie3: { kind: 'enum', dict_name: 'oui_non' },
        aq1_evtvie4: { kind: 'enum', dict_name: 'evtvie' },
        aq1_evtvie5: { kind: 'enum', dict_name: 'oui_non' },
        aq1_evtvie6: { kind: 'enum', dict_name: 'evtvie' },
        aq1_evtvie7: { kind: 'enum', dict_name: 'oui_non' },
        aq1_evtvie8: { kind: 'enum', dict_name: 'evtvie' },
        aq1_lois1: { kind: 'multi', dict_name: 'loisirs' },
        aq1_lois2: { kind: 'enum', dict_name: 'oui_non' },
        aq1_lois3: { kind: 'enum', dict_name: 'oui_non' },
        aq1_lois4: { kind: 'enum', dict_name: 'oui_non' },
        aq1_retr1: { kind: 'integer' },
        aq1_retr2: { kind: 'enum', dict_name: 'retraite2' },
        aq1_retr3: { kind: 'enum', dict_name: 'retraite3' },
        aq1_retr4: { kind: 'enum', dict_name: 'oui_non' },
        aq1_retr5: { kind: 'enum', dict_name: 'retraite5' },
        aq1_retr6: { kind: 'multi', dict_name: 'retraite6' },
        aq1_seco4: { kind: 'enum', dict_name: 'oui_non' },
        aq1_seco6: { kind: 'multi', dict_name: 'aides' },
        aq1_seco7: { kind: 'enum', dict_name: 'oui_non' },
        aq1_seco10: { kind: 'enum', dict_name: 'oui_non' },
        aq1_seco2: { kind: 'enum', dict_name: 'oui_non' },
        aq1_seco1: { kind: 'enum', dict_name: 'maison' },
        aq1_seco3: { kind: 'enum', dict_name: 'oui_non' },
        aq1_seco11: { kind: 'enum', dict_name: 'oui_non' },
        aq1_seco12: { kind: 'enum', dict_name: 'oui_non' },
        aq1_seco13: { kind: 'enum', dict_name: 'oui_non' },
        aq1_seco14: { kind: 'enum', dict_name: 'oui_non' },
        aq1_seco15: { kind: 'enum', dict_name: 'oui_non' },
        aq1_seco16: { kind: 'enum', dict_name: 'oui_non' },
        aq1_seco5: { kind: 'enum', dict_name: 'oui_non' },
        aq1_seco8: { kind: 'enum', dict_name: 'oui_non' },
        aq1_seco9: { kind: 'enum', dict_name: 'oui_non' },
        aq2_chgmt1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_chgmt2: { kind: 'multi', dict_name: 'chgmt' },
        aq2_chgmt3: { kind: 'text' },
        aq2_sgen1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_sgen2: { kind: 'enum', dict_name: 'limite' },
        aq2_sgen3: { kind: 'enum', dict_name: 'dexterite' },
        aq2_sgen4: { kind: 'enum', dict_name: 'oui_non' },
        aq2_cardioa1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_cardioa2: { kind: 'integer' },
        aq2_cardiob1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_cardiob2: { kind: 'integer' },
        aq2_cardioc1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_cardioc2: { kind: 'integer' },
        aq2_cardiod1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_cardiod2: { kind: 'integer' },
        aq2_cardioe1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_cardioe2: { kind: 'integer' },
        aq2_cardiof1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_cardiof2: { kind: 'integer' },
        aq2_cardiog1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_cardiog2: { kind: 'integer' },
        aq2_cardioh1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_cardioh2: { kind: 'integer' },
        aq2_cardioi1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_cardioi2: { kind: 'integer' },
        aq2_cardioj1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_cardioj2: { kind: 'integer' },
        aq2_respia1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_respia2: { kind: 'integer' },
        aq2_respib1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_respib2: { kind: 'integer' },
        aq2_digesta1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_digesta2: { kind: 'integer' },
        aq2_digestb1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_digestb2: { kind: 'integer' },
        aq2_digestc1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_digestc2: { kind: 'integer' },
        aq2_digestd1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_digestd2: { kind: 'integer' },
        aq2_digeste1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_digeste2: { kind: 'integer' },
        aq2_uroa1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_uroa2: { kind: 'integer' },
        aq2_urob1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_urob2: { kind: 'integer' },
        aq2_uroc1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_uroc2: { kind: 'integer' },
        aq2_gynec1: { kind: 'integer' },
        aq2_gynec2: { kind: 'enum', dict_name: 'oui_non' },
        aq2_gynec3: { kind: 'enum', dict_name: 'oui_non' },
        aq2_gynec4: { kind: 'enum', dict_name: 'menopause' },
        aq2_gynec5: { kind: 'enum', dict_name: 'oui_non' },
        aq2_neuroa1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_neuroa2: { kind: 'integer' },
        aq2_neurob1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_neurob2: { kind: 'integer' },
        aq2_osteoa1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_osteoa2: { kind: 'integer' },
        aq2_osteob1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_osteob2: { kind: 'integer' },
        aq2_osteoc1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_osteoc2: { kind: 'integer' },
        aq2_osteod1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_osteod2: { kind: 'integer' },
        aq2_osteoe1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_osteoe2: { kind: 'integer' },
        aq2_endoa1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_endoa2: { kind: 'integer' },
        aq2_endob1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_endob2: { kind: 'integer' },
        aq2_cancer1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_cancera1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_cancera2: { kind: 'integer' },
        aq2_cancerb1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_cancerb2: { kind: 'integer' },
        aq2_cancerc1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_cancerc2: { kind: 'integer' },
        aq2_cancerd1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_cancerd2: { kind: 'integer' },
        aq2_cancere1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_cancere2: { kind: 'integer' },
        aq2_cancerf1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_cancerf2: { kind: 'integer' },
        aq2_cancerg1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_cancerg2: { kind: 'integer' },
        aq2_cancerh1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_cancerh2: { kind: 'integer' },
        aq2_canceri1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_canceri2: { kind: 'integer' },
        aq2_cancerj1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_cancerj2: { kind: 'integer' },
        aq2_cancerk1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_cancerk2: { kind: 'integer' },
        aq2_cancerl1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_cancerl2: { kind: 'integer' },
        aq2_cancerm1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_cancerm2: { kind: 'integer' },
        aq2_sensoa1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_sensoa2: { kind: 'integer' },
        aq2_sensob1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_sensob2: { kind: 'integer' },
        aq2_sensoc1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_sensoc2: { kind: 'integer' },
        aq2_sensod1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_sensod2: { kind: 'integer' },
        aq2_sensoe1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_sensoe2: { kind: 'integer' },
        aq2_sensof1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_sensof2: { kind: 'integer' },
        aq2_sensog1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_sensog2: { kind: 'integer' },
        aq2_sensoh1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_sensoh2: { kind: 'integer' },
        aq2_prot: { kind: 'enum', dict_name: 'oui_non' },
        aq2_protart1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_protart2: { kind: 'integer' },
        aq2_protcard1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_protcard2: { kind: 'integer' },
        aq2_protaud1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_protaud2: { kind: 'integer' },
        aq2_protdent1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_protdent2: { kind: 'integer' },
        aq2_chir: { kind: 'enum', dict_name: 'oui_non' },
        aq2_chirtxt: { kind: 'text' },
        aq2_allerg: { kind: 'enum', dict_name: 'oui_non' },
        aq2_allergtxt: { kind: 'text' },
        aq2_atcdfam1: { kind: 'enum', dict_name: 'oui_non_nsp' },
        aq2_atcdfam2: { kind: 'enum', dict_name: 'oui_non_nsp' },
        aq2_atcdfam3: { kind: 'enum', dict_name: 'oui_non_nsp' },
        aq2_atcdfam4: { kind: 'enum', dict_name: 'oui_non_nsp' },
        aq2_atcdfam5: { kind: 'enum', dict_name: 'oui_non_nsp' },
        aq2_atcdfam6: { kind: 'enum', dict_name: 'oui_non_nsp' },
        aq2_atcdfam7: { kind: 'enum', dict_name: 'oui_non_nsp' },
        aq2_atcdfam8: { kind: 'enum', dict_name: 'oui_non_nsp' },
        aq2_atcdfam9: { kind: 'enum', dict_name: 'oui_non_nsp' },
        aq2_atcdfam10: { kind: 'enum', dict_name: 'oui_non_nsp' },
        aq2_atcdfam11: { kind: 'enum', dict_name: 'oui_non_nsp' },
        aq2_atcdfam12: { kind: 'enum', dict_name: 'oui_non_nsp' },
        aq2_atcdfam12prec: { kind: 'text' },
        aq2_med1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_med2: { kind: 'enum', dict_name: 'oui_non' },
        aq2_med11: { kind: 'enum', dict_name: 'oui_non' },
        aq2_med12: { kind: 'enum', dict_name: 'oui_non' },
        aq2_med13: { kind: 'enum', dict_name: 'oui_non' },
        aq2_med5: { kind: 'enum', dict_name: 'oui_non' },
        aq2_medmed: { kind: 'text' },
        aq2_med6: { kind: 'enum', dict_name: 'oui_non' },
        aq2_med7: { kind: 'enum', dict_name: 'oui_non' },
        aq2_med8: { kind: 'enum', dict_name: 'oui_non' },
        aq2_med9: { kind: 'enum', dict_name: 'oui_non' },
        aq2_med10: { kind: 'enum', dict_name: 'oui_non' },
        aq2_cres1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_cres2: { kind: 'enum', dict_name: 'oui_non' },
        aq2_cres3: { kind: 'enum', dict_name: 'oui_non' },
        aq2_cres4: { kind: 'enum', dict_name: 'oui_non' },
        aq2_dnut1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_dnut2: { kind: 'enum', dict_name: 'oui_non' },
        aq2_dnut3: { kind: 'enum', dict_name: 'oui_non' },
        aq2_dnut4: { kind: 'enum', dict_name: 'oui_non' },
        aq2_dnut5: { kind: 'enum', dict_name: 'oui_non' },
        aq2_dnut6: { kind: 'enum', dict_name: 'oui_non' },
        aq2_dnut7: { kind: 'enum', dict_name: 'oui_non' },
        aq2_peau: { kind: 'enum', dict_name: 'oui_non' },
        aq2_rein1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_rein2: { kind: 'enum', dict_name: 'oui_non' },
        aq2_rein3: { kind: 'enum', dict_name: 'oui_non' },
        aq2_rein4: { kind: 'enum', dict_name: 'oui_non' },
        aq2_rein5: { kind: 'enum', dict_name: 'oui_non' },
        aq2_rein6: { kind: 'enum', dict_name: 'oui_non' },
        aq2_fem1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_fem2: { kind: 'enum', dict_name: 'oui_non' },
        aq2_nerv: { kind: 'enum', dict_name: 'oui_non' },
        aq2_cogn1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_cogn2: { kind: 'enum', dict_name: 'oui_non' },
        aq2_cogn3: { kind: 'enum', dict_name: 'oui_non' },
        aq2_cogn4: { kind: 'enum', dict_name: 'oui_non' },
        aq2_cogn5: { kind: 'enum', dict_name: 'oui_non' },
        aq2_cogn6: { kind: 'enum', dict_name: 'oui_non' },
        aq2_cogn7: { kind: 'enum', dict_name: 'oui_non' },
        aq2_cogn8: { kind: 'enum', dict_name: 'oui_non' },
        aq2_chute1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_chute2: { kind: 'enum', dict_name: 'oui_non' },
        aq2_chute3: { kind: 'enum', dict_name: 'oui_non' },
        aq2_chute4: { kind: 'enum', dict_name: 'oui_non' },
        aq2_chute5: { kind: 'enum', dict_name: 'oui_non' },
        aq2_chute6: { kind: 'enum', dict_name: 'oui_non' },
        aq2_chute7: { kind: 'enum', dict_name: 'oui_non' },
        aq2_chute8: { kind: 'enum', dict_name: 'oui_non' },
        aq2_chute9: { kind: 'enum', dict_name: 'oui_non' },
        aq2_fsenso1: { kind: 'enum', dict_name: 'oui_non' },
        aq2_fsenso2: { kind: 'enum', dict_name: 'oui_non' },
        aq2_fsenso3: { kind: 'enum', dict_name: 'oui_non' },
        aq2_fsenso4: { kind: 'enum', dict_name: 'oui_non' },
        aq2_fsenso5: { kind: 'enum', dict_name: 'oui_non' },
        demo_evaluateur: { kind: 'text' },
        demo_dmo_prec: { kind: 'enum', dict_name: 'oui_non' },
        demo_dmo_prec_date: { kind: 'date' },
        demo_dmo_prec_results: { kind: 'text' },
        demo_realise: { kind: 'multi', dict_name: 'sitedmo' },
        demo_realise_raison: { kind: 'enum', dict_name: 'raison_non_realise' },
        demo_realise_raison_autre: { kind: 'text' },
        demo_dose_totale_recue: { kind: 'float' },
        demo_dmo_l1: { kind: 'float' },
        demo_dmo_l2: { kind: 'float' },
        demo_dmo_l3: { kind: 'float' },
        demo_dmo_l4: { kind: 'float' },
        demo_dmo_rachis: { kind: 'float' },
        demo_dmo_hanche_site: { kind: 'enum', dict_name: 'dmo_site2' },
        demo_dmo_col: { kind: 'float' },
        demo_dmo_hanche: { kind: 'float' },
        demo_dmo_avbras_site: { kind: 'enum', dict_name: 'dmo_site2' },
        demo_dmo_avb1: { kind: 'float' },
        demo_dmo_avb2: { kind: 'float' },
        demo_dmo_corps: { kind: 'float' },
        demo_frax_hanche: { kind: 'float' },
        demo_frax_majeur: { kind: 'float' },
        demo_dxa_mg_totale: { kind: 'integer' },
        demo_dxa_mg_pct: { kind: 'float' },
        demo_dxa_vat: { kind: 'integer' },
        demo_dxa_indice_mm: { kind: 'float' },
        demo_commentaires: { kind: 'text' },
        ems_mob0: { kind: 'text' },
        ems_objectifs_sante: { kind: 'multi', dict_name: 'ems_objectifs_sante' },
        ems_objectifs_activite: { kind: 'multi', dict_name: 'ems_objectifs_activite' },
        ems_objectifs_sante_autre: { kind: 'text' },
        ems_objectifs_activite_autre: { kind: 'text' },
        ems_auto1: { kind: 'enum', dict_name: 'ems_auto_eval' },
        ems_auto2: { kind: 'enum', dict_name: 'ems_auto_eval' },
        ems_pratique_activites: { kind: 'enum', dict_name: 'oui_non' },
        ems_act1: { kind: 'enum', dict_name: 'ems_activites_physiques' },
        ems_act1_freq: { kind: 'enum', dict_name: 'ems_freq' },
        ems_act1_temps: { kind: 'enum', dict_name: 'ems_temps' },
        ems_act1_intensite: { kind: 'enum', dict_name: 'ems_intensite' },
        ems_act2: { kind: 'enum', dict_name: 'ems_activites_physiques' },
        ems_act2_freq: { kind: 'enum', dict_name: 'ems_freq' },
        ems_act2_temps: { kind: 'enum', dict_name: 'ems_temps' },
        ems_act2_intensite: { kind: 'enum', dict_name: 'ems_intensite' },
        ems_act3: { kind: 'enum', dict_name: 'ems_activites_physiques' },
        ems_act3_freq: { kind: 'enum', dict_name: 'ems_freq' },
        ems_act3_temps: { kind: 'enum', dict_name: 'ems_temps' },
        ems_act3_intensite: { kind: 'enum', dict_name: 'ems_intensite' },
        ems_act4: { kind: 'enum', dict_name: 'ems_activites_physiques' },
        ems_act4_freq: { kind: 'enum', dict_name: 'ems_freq' },
        ems_act4_temps: { kind: 'enum', dict_name: 'ems_temps' },
        ems_act4_intensite: { kind: 'enum', dict_name: 'ems_intensite' },
        ems_act5: { kind: 'enum', dict_name: 'ems_activites_physiques' },
        ems_act5_freq: { kind: 'enum', dict_name: 'ems_freq' },
        ems_act5_temps: { kind: 'enum', dict_name: 'ems_temps' },
        ems_act5_intensite: { kind: 'enum', dict_name: 'ems_intensite' },
        ems_act6: { kind: 'enum', dict_name: 'ems_activites_physiques' },
        ems_act6_freq: { kind: 'enum', dict_name: 'ems_freq' },
        ems_act6_temps: { kind: 'enum', dict_name: 'ems_temps' },
        ems_act6_intensite: { kind: 'enum', dict_name: 'ems_intensite' },
        ems_act7: { kind: 'enum', dict_name: 'ems_activites_physiques' },
        ems_act7_freq: { kind: 'enum', dict_name: 'ems_freq' },
        ems_act7_temps: { kind: 'enum', dict_name: 'ems_temps' },
        ems_act7_intensite: { kind: 'enum', dict_name: 'ems_intensite' },
        ems_act8: { kind: 'enum', dict_name: 'ems_activites_physiques' },
        ems_act8_freq: { kind: 'enum', dict_name: 'ems_freq' },
        ems_act8_temps: { kind: 'enum', dict_name: 'ems_temps' },
        ems_act8_intensite: { kind: 'enum', dict_name: 'ems_intensite' },
        ems_act9: { kind: 'enum', dict_name: 'ems_activites_physiques' },
        ems_act9_freq: { kind: 'enum', dict_name: 'ems_freq' },
        ems_act9_temps: { kind: 'enum', dict_name: 'ems_temps' },
        ems_act9_intensite: { kind: 'enum', dict_name: 'ems_intensite' },
        ems_act10: { kind: 'enum', dict_name: 'ems_activites_physiques' },
        ems_act10_freq: { kind: 'enum', dict_name: 'ems_freq' },
        ems_act10_temps: { kind: 'enum', dict_name: 'ems_temps' },
        ems_act10_intensite: { kind: 'enum', dict_name: 'ems_intensite' },
        ems_act_autre: { kind: 'text' },
        ems_freins: { kind: 'multi', dict_name: 'frein_ems' },
        ems_freins_autre: { kind: 'text' },
        ems_temps_assis_h: { kind: 'integer' },
        ems_temps_assis_min: { kind: 'integer' },
        ems_assis_2h_continu: { kind: 'enum', dict_name: 'oui_non' },
        ems_test_handgrip_realise: { kind: 'enum', dict_name: 'oui_non' },
        ems_test_handgrip_realise_raison: { kind: 'enum', dict_name: 'raison_non_realise' },
        ems_test_handgrip_realise_autre: { kind: 'text' },
        ems_test_handgrip: { kind: 'float' },
        ems_test_handgrip_main: { kind: 'enum', dict_name: 'ems_main_utilisee' },
        ems_test_unipod_realise: { kind: 'enum', dict_name: 'oui_non' },
        ems_test_unipod_realise_raison: { kind: 'enum', dict_name: 'raison_non_realise' },
        ems_test_unipod_realise_autre: { kind: 'text' },
        ems_test_unipod: { kind: 'float' },
        ems_test_unipod_membre: { kind: 'enum', dict_name: 'ems_jambe_utilisee' },
        ems_test_vit4_realise: { kind: 'enum', dict_name: 'oui_non' },
        ems_test_vit4_realise_raison: { kind: 'enum', dict_name: 'raison_non_realise' },
        ems_test_vit4_realise_autre: { kind: 'text' },
        ems_test_vit4: { kind: 'float' },
        ems_test_vit4_posture: { kind: 'text' },
        ems_test_vit4_aide: { kind: 'enum', dict_name: 'oui_non' },
        ems_test_vit4_aide_txt: { kind: 'text' },
        ems_test_timeup_realise: { kind: 'enum', dict_name: 'oui_non' },
        ems_test_timeup_realise_raison: { kind: 'enum', dict_name: 'raison_non_realise' },
        ems_test_timeup_realise_autre: { kind: 'text' },
        ems_test_timeup: { kind: 'float' },
        ems_test_timeup_gestuel: { kind: 'enum', dict_name: 'tug' },
        ems_test_timeup_equilibre: { kind: 'enum', dict_name: 'ems_timeup_equilibre' },
        ems_test_timeup_observ: { kind: 'multi', dict_name: 'ems_tupgo_anomalies' },
        ems_test_timeup_aide: { kind: 'enum', dict_name: 'oui_non' },
        ems_test_timeup_aide_txt: { kind: 'text' },
        ems_test_getup_realise: { kind: 'enum', dict_name: 'oui_non' },
        ems_test_getup_realise_raison: { kind: 'enum', dict_name: 'raison_non_realise' },
        ems_test_getup_realise_autre: { kind: 'text' },
        ems_test_getup: { kind: 'enum', dict_name: 'ems_getup' },
        ems_test_getup_comm: { kind: 'text' },
        ems_test_getup_aide: { kind: 'enum', dict_name: 'oui_non' },
        ems_test_getup_aide_txt: { kind: 'text' },
        ems_eval1: { kind: 'enum', dict_name: 'oui_non_indecis' },
        ems_eval2: { kind: 'enum', dict_name: 'oui_non_indecis' },
        ems_eval3: { kind: 'enum', dict_name: 'oui_non_indecis' },
        ems_eval4: { kind: 'enum', dict_name: 'oui_non_indecis' },
        ems_eval4_raison: { kind: 'multi', dict_name: 'ems_non_dispo' },
        ems_eval4_raison_autre: { kind: 'text' },
        ems_dispo_matin: { kind: 'multi', dict_name: 'ems_dispo_journees' },
        ems_dispo_midi: { kind: 'multi', dict_name: 'ems_dispo_journees' },
        ems_dispo_apresmidi: { kind: 'multi', dict_name: 'ems_dispo_journees' },
        ems_dispo_soiree: { kind: 'multi', dict_name: 'ems_dispo_journees' },
        ems_synthese: { kind: 'text' },
        ems_coaching_osteo1: { kind: 'enum', dict_name: 'ems_reco_osteo1' },
        ems_coaching_osteo1_autre: { kind: 'text' },
        ems_coaching_osteo2: { kind: 'enum', dict_name: 'ems_reco_osteo2' },
        ems_coaching_osteo2_autre: { kind: 'text' },
        ems_coaching_sarco: { kind: 'enum', dict_name: 'ems_reco_sarco' },
        ems_coaching_sarco_autre: { kind: 'text' },
        ems_coaching_conseils: { kind: 'multi', dict_name: 'ems_reco_autres' },
        ems_coaching_autres_autre: { kind: 'text' },
        ems_coaching_proposition: { kind: 'enum', dict_name: 'decision_coaching' },
        ems_coaching_motivation: { kind: 'enum', dict_name: 'ems_motivation' },
        ems_coaching_ext: { kind: 'enum', dict_name: 'ems_orientation_ext' },
        ems_mob14: { kind: 'enum', dict_name: 'forme_coaching' },
        audition_audio1: { kind: 'enum', dict_name: 'oui_non' },
        audition_audio2: { kind: 'enum', dict_name: 'raison_non_realise_audition' },
        audition_audio2autre: { kind: 'text' },
        audition_audio9: { kind: 'integer' },
        audition_audio3: { kind: 'integer' },
        audition_audio10: { kind: 'integer' },
        audition_audio4: { kind: 'integer' },
        audition_audio11: { kind: 'integer' },
        audition_audio5: { kind: 'integer' },
        audition_audio12: { kind: 'integer' },
        audition_audio6: { kind: 'integer' },
        audition_audio16: { kind: 'enum', dict_name: 'oui_non' },
        audition_audio17: { kind: 'enum', dict_name: 'raison_non_realise_audition' },
        audition_audio17autre: { kind: 'text' },
        audition_audio15: { kind: 'float' },
        audition_audio_comm: { kind: 'text' },
        vision_vis1: { kind: 'enum', dict_name: 'oui_non' },
        vision_vis1b: { kind: 'enum', dict_name: 'oui_non' },
        vision_vis2: { kind: 'enum', dict_name: 'oui_non' },
        vision_vis2b: { kind: 'enum', dict_name: 'raison_non_realise_vision' },
        vision_vis2bautre: { kind: 'text' },
        vision_vis5: { kind: 'integer' },
        vision_vis4: { kind: 'integer' },
        vision_vis6: { kind: 'integer' },
        vision_vis8: { kind: 'integer' },
        vision_vis7: { kind: 'integer' },
        vision_vis9: { kind: 'integer' },
        vision_visio1: { kind: 'enum', dict_name: 'oui_non' },
        vision_visio2: { kind: 'enum', dict_name: 'raison_non_realise_vision' },
        vision_visio2autre: { kind: 'text' },
        vision_visio3: { kind: 'integer' },
        vision_visio6: { kind: 'integer' },
        vision_visio4: { kind: 'integer' },
        vision_visio7: { kind: 'integer' },
        vision_visio5: { kind: 'integer' },
        vision_visio8: { kind: 'integer' },
        vision_tono1: { kind: 'enum', dict_name: 'oui_non' },
        vision_tono2: { kind: 'enum', dict_name: 'raison_non_realise_vision' },
        vision_tono2autre: { kind: 'text' },
        vision_tono9: { kind: 'float' },
        vision_tono11: { kind: 'integer' },
        vision_tono10: { kind: 'float' },
        vision_tono12: { kind: 'integer' },
        vision_retino1: { kind: 'enum', dict_name: 'oui_non' },
        vision_retino2: { kind: 'enum', dict_name: 'raison_non_realise_vision' },
        vision_retino2autre: { kind: 'text' },
        vision_retino3: { kind: 'multi', dict_name: 'retino3' },
        vision_retino4: { kind: 'text' },
        vision_vis_comm: { kind: 'text' },
        respi_realise: { kind: 'enum', dict_name: 'oui_non' },
        respi_realise_raison: { kind: 'enum', dict_name: 'raison_non_realise' },
        respi_realise_raison_autre: { kind: 'text' },
        respi_spiro_qualite1: { kind: 'enum', dict_name: 'oui_non' },
        respi_presence_plateau: { kind: 'enum', dict_name: 'oui_non' },
        respi_vems_theorique: { kind: 'float' },
        respi_vems_limite: { kind: 'float' },
        respi_vems: { kind: 'float' },
        respi_cvf_theorique: { kind: 'float' },
        respi_cvf_limite: { kind: 'float' },
        respi_cvf: { kind: 'float' },
        respi_def2575_theorique: { kind: 'float' },
        respi_def2575_limite: { kind: 'float' },
        respi_def2575: { kind: 'float' },
        respi_demm25: { kind: 'integer' },
        respi_demm50: { kind: 'integer' },
        respi_demm75: { kind: 'integer' },
        respi_demm2575: { kind: 'integer' },
        respi_dep: { kind: 'integer' },
        respi_comm: { kind: 'text' },
        constantes_taille: { kind: 'integer' },
        constantes_poids: { kind: 'float' },
        constantes_tour_taille: { kind: 'integer' },
        constantes_tour_hanches: { kind: 'integer' },
        constantes_explcv_realise: { kind: 'enum', dict_name: 'oui_non' },
        constantes_explcv_realise_raison: { kind: 'enum', dict_name: 'raison_non_realise' },
        constantes_explcv_realise_raison_autre: { kind: 'text' },
        constantes_explcv2: { kind: 'integer' },
        constantes_explcv3: { kind: 'integer' },
        constantes_explcv4: { kind: 'integer' },
        constantes_explcv5: { kind: 'integer' },
        constantes_explcv6: { kind: 'integer' },
        constantes_explcv7: { kind: 'integer' },
        constantes_explcv2b: { kind: 'integer' },
        constantes_explcv3b: { kind: 'integer' },
        constantes_explcv4b: { kind: 'integer' },
        constantes_explcv5b: { kind: 'integer' },
        constantes_explcv6b: { kind: 'integer' },
        constantes_explcv7b: { kind: 'integer' },
        constantes_explcv8: { kind: 'integer' },
        constantes_explcv9: { kind: 'integer' },
        constantes_explcv10: { kind: 'integer' },
        constantes_explcv11: { kind: 'integer' },
        constantes_explcv12: { kind: 'integer' },
        constantes_explcv13: { kind: 'integer' },
        constantes_explcv14: { kind: 'integer' },
        constantes_explcv15: { kind: 'integer' },
        constantes_explcv16: { kind: 'integer' },
        constantes_explcv_realise_vop: { kind: 'enum', dict_name: 'oui_non' },
        constantes_explcv_realise_vop_raison: { kind: 'enum', dict_name: 'raison_non_realise' },
        constantes_explcv_realise_vop_raison_autre: { kind: 'text' },
        constantes_explcv17: { kind: 'float' },
        constantes_explcv18: { kind: 'float' },
        constantes_explcv19: { kind: 'float' },
        constantes_explcv_realise_ager: { kind: 'enum', dict_name: 'oui_non' },
        constantes_explcv_realise_ager_raison: { kind: 'enum', dict_name: 'raison_non_realise' },
        constantes_explcv_realise_ager_raison_autre: { kind: 'text' },
        constantes_cv_glyc: { kind: 'float' },
        diet_evaluateur: { kind: 'text' },
        diet_repas_par_jour: { kind: 'integer' },
        diet_collations_par_jour: { kind: 'integer' },
        diet_rythme_regulier: { kind: 'enum', dict_name: 'oui_non' },
        diet_modes_alimentaires: { kind: 'multi', dict_name: 'diet_modes_alimentaires' },
        diet_modes_alimentaires_autre: { kind: 'text' },
        diet_diversite_alimentaire: { kind: 'enum', dict_name: 'diet_0a3' },
        diet_grignotage: { kind: 'enum', dict_name: 'diet_0a3' },
        diet_grignotage_type: { kind: 'enum', dict_name: 'diet_types_grignotage' },
        diet_plaisir_manger: { kind: 'enum', dict_name: 'diet_0a3' },
        diet_plaisir_causes1: { kind: 'multi', dict_name: 'd8ixe771' },
        diet_plaisir_causes2: { kind: 'multi', dict_name: 'gk23ykiw' },
        diet_signaux1: { kind: 'enum', dict_name: 'diet_0a3' },
        diet_signaux2: { kind: 'enum', dict_name: 'diet_0a3' },
        diet_signaux3: { kind: 'enum', dict_name: 'diet_0a3' },
        diet_tendances_adaptees: { kind: 'enum', dict_name: 'oui_non' },
        diet_tendances_inadaptees: { kind: 'enum', dict_name: 'comp_ali_inadapt' },
        diet_tendances_types: { kind: 'multi', dict_name: 'diet_tendances' },
        diet_apports_proteines: { kind: 'enum', dict_name: 'diet_apports' },
        diet_apports_calcium: { kind: 'enum', dict_name: 'diet_apports' },
        diet_apports_global: { kind: 'enum', dict_name: 'diet_apports' },
        diet_albuminemie: { kind: 'integer' },
        diet_interet1: { kind: 'enum', dict_name: 'diet_0a3' },
        diet_preparation1: { kind: 'enum', dict_name: 'diet_preparation' },
        diet_preparation2: { kind: 'enum', dict_name: 'diet_preparation' },
        diet_preparation3: { kind: 'enum', dict_name: 'diet_preparation' },
        diet_poids_estime_6mois: { kind: 'integer' },
        diet_variation_volontaire: { kind: 'enum', dict_name: 'oui_non' },
        diet_motiv_envie: { kind: 'enum', dict_name: 'oui_non' },
        diet_motiv_pret: { kind: 'enum', dict_name: 'diet_pret' },
        diet_synthese: { kind: 'text' },
        diet_objectifs: { kind: 'text' },
        diet_proposition_coaching: { kind: 'enum', dict_name: 'decision_coaching' },
        diet_forme_coaching: { kind: 'enum', dict_name: 'forme_coaching' },
        rdv_pl_financeur: { kind: 'enum', dict_name: 'rdv_financeur_pl' },
        rdv_balc_entreprise: { kind: 'enum', dict_name: 'rdv_entreprise_balc' },
        rdv_plid: { kind: 'text' },
        rdv_statut_rdv: { kind: 'enum', dict_name: 'statut_rdv' },
        rdv_date: { kind: 'date' },
        consultant_sexe: { kind: 'enum', dict_name: 'sexe' },
        consultant_nom: { kind: 'text' },
        consultant_nom_jeune_fille: { kind: 'text' },
        consultant_prenom: { kind: 'text' },
        consultant_date_naissance: { kind: 'date' },
        consultant_ville_naissance: { kind: 'text' },
        consultant_adresse: { kind: 'text' },
        consultant_code_postal: { kind: 'text' },
        consultant_ville: { kind: 'text' },
        consultant_tel: { kind: 'text' },
        consultant_mail: { kind: 'text' },
        consultant_mail_entreprise: { kind: 'text' },
        consultant_financeur: { kind: 'enum', dict_name: 'financeur' },
        consultant_numero_secu_consultant: { kind: 'text' },
        consultant_nom_med_consultant: { kind: 'text' },
        consultant_prenom_med_consultant: { kind: 'text' },
        consultant_ville_med_consultant: { kind: 'text' },
        consultant_adresse_med_consultant: { kind: 'text' },
        consultant_mail_med_consultant: { kind: 'text' },
        consultant_med_spec_consultant: { kind: 'text' },
        consultant_nom_pharma_consultant: { kind: 'text' },
        consultant_ville_pharma_consultant: { kind: 'text' },
        consultant_transmission_resultats: { kind: 'enum', dict_name: 'oui_non' },
        ecg_realise: { kind: 'enum', dict_name: 'oui_non' },
        ecg_realise_raison: { kind: 'enum', dict_name: 'raison_non_realise' },
        ecg_realise_raison_autre: { kind: 'text' },
        ecg_ecg1: { kind: 'multi', dict_name: 'ecg_rythme' },
        ecg_ecg2: { kind: 'multi', dict_name: 'ecg_extrasystole' },
        ecg_ecg3: { kind: 'multi', dict_name: 'ecg_conduction' },
        ecg_ecg4: { kind: 'multi', dict_name: 'ecg_qrs' },
        ecg_ecg5: { kind: 'multi', dict_name: 'ecg_surcharge' },
        ecg_ecg6: { kind: 'multi', dict_name: 'ecg_aspect_necrose' },
        ecg_ecg7: { kind: 'multi', dict_name: 'ecg_localisation_necrose' },
        ecg_ecg8: { kind: 'multi', dict_name: 'ecg_repolarisation' },
        ecg_ecg9: { kind: 'multi', dict_name: 'ecg_lesion_epi' },
        ecg_ecg10: { kind: 'multi', dict_name: 'ecg_lesion_endo' },
        ecg_ecg11: { kind: 'multi', dict_name: 'ecg_ischemie_epi' },
        ecg_ecg12: { kind: 'multi', dict_name: 'ecg_ischemie_endo' },
        ecg_ecg13: { kind: 'enum', dict_name: 'ecg_anterieur' },
        ecg_ecg14: { kind: 'multi', dict_name: 'ecg_conclusion' },
        ecg_delai_consultation: { kind: 'enum', dict_name: 'ecg_delai_consultation' },
        ecg_ecg15: { kind: 'text' },
        rdv_statut_aq: { kind: 'enum', dict_name: 'statut_aq' },
        consultant_age: { kind: 'integer' },
        constantes_imc: { kind: 'float' },
        audition_perte_tonale_gauche: { kind: 'float' },
        audition_perte_tonale_droite: { kind: 'float' },
        diet_variation_ponderale: { kind: 'float' },
        respi_vems_cvf: { kind: 'float' },
    };

    function translateInt(str)
    {
        let value = parseInt(str, 10);
        return !isNaN(value) ? value : null;
    }

    function translateFloat(str)
    {
        let value = parseFloat(str);
        return !isNaN(value) ? util.roundTo(value, 2) : null;
    }

    function computeAge(birth_date, rdv_date)
    {
        birth_date = (birth_date || '').split('-').map(x => parseInt(x, 10));
        rdv_date = (rdv_date || '').split('-').map(x => parseInt(x, 10));

        if (birth_date.length != 3 || rdv_date.length != 3)
            return null;

        let age = rdv_date[0] - birth_date[0];
        age -= (rdv_date[1] < birth_date[1] ||
                (rdv_date[1] == birth_date[1] && rdv_date[2] < birth_date[2]));

        return age;
    }

    function translateRow(row)
    {
        let row2 = {};
        for (let var_name in VarInfo) {
            let var_info = VarInfo[var_name];
            let csv_name = var_name.replace('_', '.');

            if (row[csv_name] === undefined)
                continue;

            switch (var_info.kind) {
                case 'text': {
                    let value = row[csv_name];
                    row2[var_name] = value ? value : null;
                } break;
                case 'date': {
                    let parts = row[csv_name].split('-');
                    if (parts.length === 3) {
                        row2[var_name] = `${parts[2]}/${parts[1]}/${parts[0]}`;
                    } else {
                        row2[var_name] = null;
                    }
                } break;
                case 'enum': {
                    let dict = DictInfo[var_info.dict_name];

                    let value = parseInt(row[csv_name]);
                    value = isNaN(value) ? row[csv_name] : value;

                    row2[var_name] = dict[value] ? value : null;
                } break;
                case 'multi': {
                    let dict = DictInfo[var_info.dict_name];

                    row2[var_name] = row[csv_name].split('|').map(str => {
                        let value = parseInt(str);
                        value = isNaN(value) ? str : value;

                        return dict[value] ? value : null;
                    }).filter(value => value !== null);
                } break;
                case 'integer': { row2[var_name] = translateInt(row[csv_name]); } break;
                case 'float': { row2[var_name] = translateFloat(row[csv_name]); } break;
            }
        }

        row2.rdv_age = computeAge(row['consultant.date_naissance'], row['rdv.date']);

        // FIXME: Wrong shortcut but acceptable for now (no biology)
        row2.bio_albuminemie = 40;

        // Simplified neuropsy variables
        row2.neuropsy_moca = translateFloat(row['neuropsy.score_moca']),
        row2.neuropsy_tmta = translateFloat(row['neuropsy.score_tmta_temps']),
        row2.neuropsy_lecture = translateFloat(row['neuropsy.score_lecture_temps']),
        row2.neuropsy_tmtb = translateFloat(row['neuropsy.score_tmtb_temps']),
        row2.neuropsy_interf = translateFloat(row['neuropsy.score_interf_temps1']),
        row2.neuropsy_slc = translateFloat(row['neuropsy.seqlc_score_brut']),
        row2.neuropsy_animx = translateFloat(row['neuropsy.score_flu1_correct']),
        row2.neuropsy_p = translateFloat(row['neuropsy.score_flu2_correct']),
        row2.neuropsy_rl = translateFloat(row['neuropsy.score_3rl']) || translateFloat(row['neuropsy.score_2rl']),
        row2.neuropsy_rt = translateFloat(row['neuropsy.score_3rt']) || translateFloat(row['neuropsy.score_2rt'])

        // Simplified EMS variables
        row2.ems_temps_assis_jour = parseInt(row['ems.temps_assis_jour_h']) * 60 +
                                    parseInt(row['ems.temps_assis_jour_min'])
        for (let i = 1; i <= 10; i++) {
            switch (row2[`ems.act${i}_temps`]) {
                case 0: { row2[`ems_act${i}_temps`] = 15; } break;
                case 1: { row2[`ems_act${i}_temps`] = 30; } break;
                case 2: { row2[`ems_act${i}_temps`] = 45; } break;
                case 3: { row2[`ems_act${i}_temps`] = 60; } break;
                case 4: { row2[`ems_act${i}_temps`] = 90; } break;
                case 5: { row2[`ems_act${i}_temps`] = 120; } break;
                case 6: { row2[`ems_act${i}_temps`] = 180; } break;
                case null: { row2[`ems_act${i}_temps`] = null; } break;
            }
        }

        return row2;
    }

    function rowIsValid(row)
    {
        return row.consultant_nom && row.consultant_sexe;
    }

    this.getVarInfo = function(dict_name) { return VarInfo[dict_name]; }
    this.getDictInfo = function(dict_name) { return DictInfo[dict_name]; }

    this.readFileAsync = function(file, config) {
        Papa.parse(file, {
            header: true,
            encoding: config.encoding,
            chunk: ret => {
                for (let row of ret.data) {
                    row = translateRow(row);
                    if (rowIsValid(row))
                        config.step(row);
                }
            },
            complete: config.complete
        });
    };

    // Must be executed from within VZV domain
    this.importFromVZV = function(id, func) {
        let vzv = 'https://monparcours-sante.pasteur-lille.fr/iplille';

        // I copied this garbage from a Voozanoo export request, I don't know what
        // parts are important. And honestly I don't care, Voozanoo is beyond garbage.
        let url = `${vzv}/export/index/build/id/190/fmt/csv/exportoptions/[{"name":"encoding","value":"utf-8"},{"name":"separator","value":";"},{"name":"terminator","value":"CRLF"},{"name":"dictionnary","value":"code"}]`;
        let body = {
            id: 'inPL',
            total_rows: 1,
            begin: 0,
            range: 0,
            cursor: 0,
            standby: true,
            mode: 'rw',
            metadata: {
                fields: {
                    id_rdv: {
                        type: 'integer',
                        mandatory: 'false',
                        default_label: 'ID RDV',
                        integer: { max: null, min: null }
                    }
                },
                variables: []
            },
            rowdata: [{ id_rdv: id }],
            clientdata: {
                generatedids: [],
                changedfields: []
            }
        };
        let params = {
            headers: {
                'Accept': '*/*',
                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
            },
            method: 'POST',
            credentials: 'include',
            body: `data=${encodeURIComponent(JSON.stringify(body))}`
        };

        // TODO: Improve error management in this code
        return fetch(url, params).then(response => response.json())
                                 .then(json => {
            let url = `${vzv}/export/index/download/file/${json.filename}`;
            let params = {
                credentials: 'include'
            };

            return fetch(url, params);
        }).then(response => response.text())
          .then(csv => {
            let rows = Papa.parse(csv, {
                header: true,
                encoding: 'UTF-8',
                complete: ret => {
                    row = translateRow(ret.data[0] || {});
                    func(row);
                }
            });
        });
    };

    return this;
}).call({});
