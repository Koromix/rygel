%YAML 1.2
---
name: blikk
file_extensions: [blikk]
scope: source.blikk

contexts:
  main:
    - match: \#.*
      scope: comment.line.blikk
    - match: \b(if|else|while|begin|end|return|in|do|mut|break|continue|record|enum)\b
      scope: keyword.control.blikk
    - match: \bfunc\b
      scope: keyword.control.blikk
      push: function
    - match: \blet\b
      scope: keyword.control.blikk
      push: let
    - match: \bfor\b
      scope: keyword.control.blikk
      push: for
    - match: \b(Null|Bool|Int|Float|String|Type)\b
      scope: storage.type.blikk
    - match: (<<=?|>>=?|&&|\|\||[:*%\/+\-&\^|~!<>=]=?)
      scope: keyword.operator.blikk
    - match: '"'
      push: string
    - match: \(
      push: brackets
    - match: \)
      scope: invalid.illegal.blikk
    - match: \b(true|false|null)\b
      scope: constant.language.blikk
    - match: \b(0x[0-9a-fA-F_]*|[0-9_]+(\.?[0-9_]*)?|0o[0-8_]*|0b[01_]*)\b
      scope: constant.numeric.blikk
    - match: \b([[:alpha:]_][[:alnum:]_]*) *\(\b
      captures:
      1: variable.function.blikk
      push: brackets

  function:
    - match: \b[[:alpha:]_][[:alnum:]_]*\b
      scope: entity.name.function.blikk
      pop: true

  let:
    - match: \bmut\b
      scope: keyword.control.blikk
    - match: \b[[:alpha:]_][[:alnum:]_]*\b
      scope: variable.other.blikk
      pop: true
  for:
    - match: \bmut\b
      scope: keyword.control.blikk
    - match: \b[[:alpha:]_][[:alnum:]_]*\b
      scope: variable.other.blikk
      pop: true

  brackets:
    - match: \)
      pop: true
    - include: main

  string:
    - meta_scope: string.quoted.double.blikk
    - match: \\.
      scope: constant.character.escape.blikk
    - match: '"'
      pop: true
