# Ne cherchez pas la logique dans ce script, ce sont des bouts de code
# tapés presque au hasard pour mettrer au point le parseur.

let z = 5 + # Les nouvelles lignes mettent fin à une commande, sauf si une expression est
        3   # encore ouverte comme c'est le cas ici avec le + non suivi d'une valeur.

let x = 2 + 8 * 5 - (0x1444 << 5) > 2 and true

# Les variables doivent être déclarées à l'aide du mot-clé let. Par défaut, leur valeur
# ne pas être modifiée par la suite à moins d'utiliser "let mut".

let test = (5 = 8)
let mut p = 8

# Les noms de variables et de fonctions peuvent utiliser des caractères Unicode reconnus
# par la norme "Unicode Identifier and Pattern Syntax" (http://www.unicode.org/reports/tr31/).
# Les fichiers doivent être encodés en UTF-8. Attention cependant, blikk ne normalise
# pas les séquences de caractères !

let изменяемый = 12
let α = 2

printLn("Test Unicode = ", изменяемый + α)

# Les boucles for permettront à terme d'itérer sur différents objets, en attendant d'avoir
# des objets on peut déjà itérer sur un intervalle d'entiers.

for i in 2:5
    for j in 3:6
        printLn("for loop ", i, " ", j)
    end
end

# Pour modifier la valeur d'une variable déjà créée il faut utiliser l'opérateur := (et non =)
# Je ne suis pas sûr pour ça, mais le but est d'éviter les erreurs dans les expressions,
# comme par exemple en JS ou en C quand on fait : if (a = 1) {}. C'est une source fréquente de
# bug, car au lieu de tester si a = 1 (ce qu'on voulait probablement faire), on assigne la
# valeur 1 à la variable a.

let mut blop = 0
while blop < 100
    blop += 1
end
while blop > 10 do blop := blop - 1
printLn("blop = ", blop)

p := 5
# test := true

# Les instructions continue et break sont utilisables dans les boucles: break interrompt la
# boucle et continue court-circuite le reste du contenue et va directement à l'itération suivante.

printLn("Testing break and continue")
for i in 1:8
    print("Outler loop ", i)
    if i = 3
        printLn("    [SKIPPING!!]")
        continue
    end
    if i = 5
        printLn("    [ABORT!!]")
        break
    end
    printLn()

    let mut j = 0
    while (j := j + 1) < 10
        printLn("  Hello: ", j)
        if j = 3 do continue
        if j = 7 do break
        printLn("  Going strong!")
    end

    printLn("--------------")
end
printLn("Seems to work!")

# Les variables de ce langage ont une portée lexicale. En dehors de if, while & compagnie,
# il est possible de définir des blocs à l'aide de begin/end. Les deux variables zzz et bleh
# dans le bloc ci-dessous n'existent plus à la sortie du bloc.

begin
    let zzz = 2
    let bleh = 8

    begin
    end

    begin
        let foobar = "STRING"
    end
end

# C'est un langage avec typage statique et inférence de type. Si on ne précise pas le
# type de variable il est déduit de l'expression à droite, mais on peut aussi le préciser.
# Si le type est précisé il est possible d'omettre la valeur d'initialisation.

let foo: String = "Hello" # OK
# let bar: Int = "World!" # Cette ligne décomentée génère une erreur de compilation
let empty: Float

let mut txt = "FOO"
if test do txt := "BAR"
printLn(txt)

if empty < 1.0
    let blikk = 2.0
    p := 227
else if true
    let blikk = 3.0
    p := 89
else
    let blikk = 4.0
    p := 226
end

printLn("The value of p is: ", p)

# Les fonctions sont également typées, bien évidemment ! On commence par fibonacci,
# un classique...

func fib(n: Int): Int
    if n <= 1 do return n
    return fib(n - 1) + fib(n - 2)
end

let fib_n = 13
printLn("fib(", fib_n, ") = ", fib(fib_n))

# On peut aussi faire des fonctions qui ne retournent pas de valeur ! En réalité
# elles retournent alors la valeur null (seule valeur possible du type Null).
# On remarque par ailleurs que les fonctions peuvent être appelés avant leur déclaration.

let nn: Null = testf()
printLn(nn)

func testf()
    for j in 0:8
    end
end

# Les fonctions peuvent être surchargées, c'est à dire qu'on peut avoir plusieurs fonctions
# avec le même nom tant qu'elles prennent des paramètres différents. Il n'est pas autorisé
# d'avoir les mêmes types de paramètres mais un type de retour différent.

func overload() do printLn("test")
func overload(p1: Int) do printLn("test! (", p1, ")")
func overload(p1: Int,
              p2: Float) do printLn("test... (", p1, " -- ", p2, ")")

printLn("Test overloads!")
overload(2, 3.0)
overload(2)
overload()
# overload(2, 3, "hello") # Erreur car il n'y a pas de définition de overload() qui correspond

# Et maintenant une séquence assez random qui m'a servi à implémenter le support des fonctions :)
# On la garde pour tester que tout ne commence pas à déconner pour une raison X ou Y.

func tt(e: String, ii: Int): Bool
    let mut tte = 267
    begin
        let xx = 3
        tte := tte + xx * eee(xx + ii)
        eee(xx)
    end
    printLn("hello ", e, " (", ii, ") ", tte)
    return true
end

func eee(mut pp: Int): Int
    let xxxxx = 1
    printLn("CALLED eee with ", pp)
    pp := pp + 1
    return pp
end

let mut zz = 0
while zz < 3
    tt("Niels", zz)
    zz := zz + 1
end
while (zz := inc(zz)) < 9 do tt("Nelson", (zz += 1) - 1)

func inc(pp: Int): Int do return pp + 1

func func0(): String
    return "func0()"
end
func inline0(): String do return "inline0()"

printLn("TESTING ", func0())
printLn("TESTING ", inline0())

# blikk optimise la récursivité terminale (TRE = tail recursion elimination).

func factorial(n: Int, accum: Int): Int
    let soFar = n * accum
    if n <= 1 do return soFar
    return factorial(n - 1, soFar)
end
func factorial(n: Int): Int do return factorial(n, 1)

printLn(factorial(18))

# Tests fonctions et types

let ttt = typeOf(printLn)
let zzz = printLn
let zzz2: ttt = printLn
zzz("ALIASED printLn")
zzz2("ALIASED printLn 2")

func get_math_function(name: String): typeOf(asin)
    if name = "asin" do return asin
    if name = "acos" do return acos

    printLn("Erroneous function name '", name, "'")
    return fake_math_function
end
func fake_math_function(f: Float): Float do return NaN

printLn("ASIN 0.5 = ", get_math_function("asin")(0.5))
printLn("ACOS 0.5 = ", get_math_function("acos")(0.5))
printLn("ERROR 0.5 = ", get_math_function("error")(0.5))

func infer(a: Int) do return a

printLn("INFER1 = ", infer(1))
printLn("INFER2 = ", infer2(1.2))

func infer2(a: Float) do return infer3(a, 2.0)
func infer3(a: Float, b: Float): Float do return a * b
